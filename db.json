{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/img/article/tag.png","path":"img/article/tag.png","modified":1,"renderable":0},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.min.css","path":"css/beantech.min.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.css","path":"css/beantech.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/donate.css","path":"css/donate.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/rocket.styl","path":"css/rocket.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/toc.styl","path":"css/toc.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/signature.styl","path":"css/signature.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/widget.styl","path":"css/widget.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"source/img/article_header/article_bg3.jpg","path":"img/article_header/article_bg3.jpg","modified":1,"renderable":0},{"_id":"source/img/avatar/avatar.jpg","path":"img/avatar/avatar.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/about3.jpg","path":"img/header_img/about3.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/archive1.jpg","path":"img/header_img/archive1.jpg","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/images/rocket.png","path":"css/images/rocket.png","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/images/ironman.png","path":"css/images/ironman.png","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/avatar/ironman.png","path":"img/avatar/ironman.png","modified":1,"renderable":0},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":1,"renderable":0},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":1,"renderable":0},{"_id":"source/img/article/huweihuang_blog.png","path":"img/article/huweihuang_blog.png","modified":1,"renderable":0},{"_id":"source/img/article_header/article_bg4.jpg","path":"img/article_header/article_bg4.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/tag.png","path":"img/header_img/tag.png","modified":1,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home2.png","path":"img/header_img/home2.png","modified":1,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"06c09628020ce1ae5e2917d6aa079c98a241d73f","modified":1619141164801},{"_id":"source/CNAME","hash":"ba3fba224d4bcb9fa4f74531817d57e580bffb1c","modified":1619161928215},{"_id":"themes/huweihuang/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1616068545000},{"_id":"themes/huweihuang/_config.yml","hash":"bec07302dc2c6ab7d3b5e516a673e3ef1c73a2bc","modified":1619141049069},{"_id":"source/favicon.ico","hash":"ca2a4e7d041fa0a86b38a29ea6d2328d41e2da4e","modified":1590040172113},{"_id":"source/_posts/BFC理解与应用.md","hash":"562bc869955c602864b38d1b428f6dcb22c815ed","modified":1644570252809},{"_id":"source/_posts/ElementUI弹窗默认z-index层问题.md","hash":"ef745b00de8be89ac5a4e46014b1c0897e40c630","modified":1620466324373},{"_id":"source/_posts/div横向排版的几种方式.md","hash":"5eb60642f4098aedce1eab1bc3a6019385d36338","modified":1620284491330},{"_id":"source/_posts/在scroll-view中使用sticky.md","hash":"7f7474744ed5ef76e8f4a1ee67706fa2c7a866d6","modified":1620466504767},{"_id":"source/_posts/小程序原生组件页面层级问题.md","hash":"d6f6260ff2daf02f527424960750bf57ecc08dab","modified":1627375585883},{"_id":"source/_posts/【在JavaScript中理解数据结构】链表.md","hash":"04f6b5a360bcdde0be8eab7b3672cb3be117d19e","modified":1641560309161},{"_id":"source/_posts/微信小程序后台播放音频.md","hash":"bafe77afd6af0e3bf512fbddc978a3e1169a5884","modified":1620284459492},{"_id":"source/_posts/浏览器缓存.md","hash":"a224f551238ea2ce7ab5ee9a4074e264c2eb1ec4","modified":1644657211937},{"_id":"source/_posts/弹性布局flex详解.md","hash":"9502f30085bd715d4edf66c710a481c986387807","modified":1620284223822},{"_id":"source/_posts/理解JS中的new及其工作.md","hash":"93d94ba5d5a3fb9e33198bef3110fcd2b24d39f9","modified":1627637605806},{"_id":"source/_posts/计算机基础知识-什么是http？.md","hash":"f1b1d6de0517fa415e438d8c3bbb4b31eb4d81b1","modified":1620571406304},{"_id":"source/about/index.md","hash":"5445f225cbf08929d19d06d783e9231cf977590e","modified":1644571306341},{"_id":"source/archive/index.md","hash":"47a9501d3a291bf7aa454a397b7f4138d3f4affc","modified":1644571033600},{"_id":"source/tags/index.md","hash":"61e00a7d2151f528a7c5744594b48b105ae5b20b","modified":1644826219636},{"_id":"themes/huweihuang/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1616068545000},{"_id":"themes/huweihuang/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1616068545000},{"_id":"themes/huweihuang/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1616068545000},{"_id":"themes/huweihuang/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1616068545000},{"_id":"themes/huweihuang/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1616068545000},{"_id":"themes/huweihuang/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1616068545000},{"_id":"themes/huweihuang/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1616068545000},{"_id":"themes/huweihuang/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1616068545000},{"_id":"themes/huweihuang/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1616068545000},{"_id":"themes/huweihuang/layout/404.ejs","hash":"40de38bd399f6f4aef0d6c63c7b13b02d74f1c56","modified":1616068545000},{"_id":"themes/huweihuang/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1616068545000},{"_id":"themes/huweihuang/layout/archive.ejs","hash":"c15726ab348cbf75291b88ffe5e5e50335b5cb0b","modified":1616068545000},{"_id":"themes/huweihuang/layout/index.ejs","hash":"9e682d5d19cce88ffcae6bbcd0d644df64a6d735","modified":1616068545000},{"_id":"themes/huweihuang/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1616068545000},{"_id":"themes/huweihuang/layout/layout.ejs","hash":"6efee96baaeb079b0abb2642c8d64edf01946a2e","modified":1619162231963},{"_id":"themes/huweihuang/layout/page.ejs","hash":"5e588f200a7b7cd3ae40402b0dd3b779aac6787f","modified":1616068545000},{"_id":"themes/huweihuang/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1616068545000},{"_id":"themes/huweihuang/layout/post.ejs","hash":"cad30f3be80a7f0c98bfee58c1de5a527a25e9fa","modified":1619143563148},{"_id":"source/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1616068545000},{"_id":"source/img/header_img/about.jpg","hash":"30c7c4843b74afd972407b6797cf04c54a6ad2f4","modified":1593590301270},{"_id":"themes/huweihuang/layout/_partial/footer.ejs","hash":"d9f657b9ccf17006a3b66d51cee6ee587ba473ec","modified":1631240713189},{"_id":"themes/huweihuang/layout/_partial/head.ejs","hash":"f057d6140035de0c7dd841511615d8cbdb531f1b","modified":1619142557326},{"_id":"themes/huweihuang/layout/_partial/header.ejs","hash":"3bd09df76e0622d76d186b020393fcab361e6c97","modified":1616068545000},{"_id":"themes/huweihuang/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1616068545000},{"_id":"themes/huweihuang/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1616068545000},{"_id":"themes/huweihuang/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1616068545000},{"_id":"themes/huweihuang/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1616068545000},{"_id":"themes/huweihuang/layout/_partial/toc.ejs","hash":"65232e4840ff4ab95cb9d33d299dad8ac9160046","modified":1644378042508},{"_id":"themes/huweihuang/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1616068545000},{"_id":"themes/huweihuang/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1616068545000},{"_id":"themes/huweihuang/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1616068545000},{"_id":"themes/huweihuang/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1616068545000},{"_id":"themes/huweihuang/layout/_widget/short-about.ejs","hash":"315de02246f07c747c32495e107ad7b19cb3ff54","modified":1616068545000},{"_id":"themes/huweihuang/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1616068545000},{"_id":"themes/huweihuang/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1616068545000},{"_id":"themes/huweihuang/source/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1644825587795},{"_id":"themes/huweihuang/source/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1616068545000},{"_id":"themes/huweihuang/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1616068545000},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1616068545000},{"_id":"themes/huweihuang/source/css/rocket.styl","hash":"ede0821bc5b8e02ff87349bd9bf2bc822a537a67","modified":1618585644877},{"_id":"themes/huweihuang/source/css/toc.styl","hash":"631e97f634d30f53314e2fec8bdde267c1c49f4c","modified":1616068545000},{"_id":"themes/huweihuang/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1616068545000},{"_id":"themes/huweihuang/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1616068545000},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1616068545000},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1616068545000},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1616068545000},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1616068545000},{"_id":"themes/huweihuang/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1616068545000},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1616068545000},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1616068545000},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1616068545000},{"_id":"themes/huweihuang/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1616068545000},{"_id":"themes/huweihuang/source/js/toc.js","hash":"6df6fb0a39ce2586b406dabf53e3a3e9681c5a54","modified":1619186364367},{"_id":"themes/huweihuang/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1616068545000},{"_id":"source/img/article_header/article_bg3.jpg","hash":"41b318cfc7f8c1e0a4a0dd18859976c8f46c4f00","modified":1590175012129},{"_id":"source/img/avatar/avatar.jpg","hash":"eab80038a5ebb0d736e730a126bd547c00e8cf71","modified":1590036907106},{"_id":"source/img/header_img/about3.jpg","hash":"fcde77730a40808a22e9dc61b0453a2a10c5b1c8","modified":1590175040361},{"_id":"source/img/header_img/archive1.jpg","hash":"dd5a6b397a19772bcc37eda7d8b7c22848b606b9","modified":1640267848189},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1616068545000},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1616068545000},{"_id":"themes/huweihuang/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1616068545000},{"_id":"themes/huweihuang/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1616068545000},{"_id":"source/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1616068545000},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1616068545000},{"_id":"themes/huweihuang/source/css/bootstrap.css","hash":"53e6ff9a1b3eebdef21499576f155922a291a94b","modified":1618585575717},{"_id":"themes/huweihuang/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1616068545000},{"_id":"themes/huweihuang/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1616068545000},{"_id":"themes/huweihuang/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1616068545000},{"_id":"source/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1616068545000},{"_id":"source/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1616068545000},{"_id":"source/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1616068545000},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1616068545000},{"_id":"source/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1616068545000},{"_id":"source/img/article_header/article_bg4.jpg","hash":"bbe665cdd63c6dfea670749d3642aad2dd03f6c1","modified":1590175076131},{"_id":"source/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1616068545000},{"_id":"source/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1616068545000},{"_id":"source/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1616068545000},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1616068545000},{"_id":"source/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1616068545000},{"_id":"source/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1616068545000},{"_id":"public/post-sitemap.xml","hash":"03c6c7ad34cd9e0e86b7a829c5d2ece9fefef949","modified":1644826280330},{"_id":"public/category-sitemap.xml","hash":"2eea76f6b11dbdb54fcdf967c311f88c10cf4a51","modified":1644826280331},{"_id":"public/page-sitemap.xml","hash":"dc3eb00b21b7853f1a6fe938f7a6183141d73f7a","modified":1644826280331},{"_id":"public/tag-sitemap.xml","hash":"46f8490ff58062961e908500b643aa0e9a5c4cf2","modified":1644826280331},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1644826280489},{"_id":"public/sitemap.xml","hash":"03b9baff5e0bb151711231d351a5d864d29d9ac6","modified":1644826280565},{"_id":"public/404.html","hash":"e1cfebe57714bc5dd1286c537eb5586837a86fa2","modified":1644826281083},{"_id":"public/tags/index.html","hash":"8686260d465d851aed2924b0c416983587f27a9a","modified":1644826281083},{"_id":"public/article/浏览器缓存/index.html","hash":"4c4e0df4fc2cdd2b34be48fa6729fa07e6f0ee18","modified":1644826281083},{"_id":"public/article/BFC理解与应用/index.html","hash":"3edc0aad39c70d87ab6d57763a851c01884bf61a","modified":1644826281083},{"_id":"public/article/【在JavaScript中理解数据结构】链表/index.html","hash":"d03fccedca7bc0771912e19429772b435411a3c1","modified":1644826281083},{"_id":"public/article/计算机基础知识-什么是http？/index.html","hash":"cea8dbc0f95a5c7cd6a3f429a497b8a47d983ff3","modified":1644826281083},{"_id":"public/微信小程序/微信小程序后台播放音频/index.html","hash":"53d6820cba1f0403be2610bcbf22bcb72ede8d1b","modified":1644826281083},{"_id":"public/微信小程序/在scroll-view中使用sticky/index.html","hash":"cbfbb4b4500af1d9c87c2811ee9f926a9136ec57","modified":1644826281083},{"_id":"public/article/ElementUI弹窗默认z-index层问题/index.html","hash":"3b0947bf0cddca79c51d110125b716cda949015e","modified":1644826281083},{"_id":"public/article/理解JS中的new及其工作/index.html","hash":"d7476bc5fa15fa7daec0710530282d33c7b9e59f","modified":1644826281084},{"_id":"public/css/弹性布局flex详解/index.html","hash":"aab10958ca424c8fb06cdd98d1097115af0b034c","modified":1644826281084},{"_id":"public/css/div横向排版的几种方式/index.html","hash":"5c17a11bd81b3ae97a931a83407ce9f40c45d32f","modified":1644826281084},{"_id":"public/微信小程序/小程序原生组件页面层级问题/index.html","hash":"396e79932ff4cd566703a6dcc8c76512b614dd0e","modified":1644826281084},{"_id":"public/about/index.html","hash":"7ab7bb8ea4c86138ad22ce760eaef9eb6c743ccc","modified":1644826281084},{"_id":"public/archive/index.html","hash":"7ba26c4cc378c0b2f2fce5d164a764a44ac50346","modified":1644826281084},{"_id":"public/categories/微信小程序/index.html","hash":"4ce4649bbe486ed2606778c3833ab2195c656554","modified":1644826281084},{"_id":"public/categories/css/index.html","hash":"6cbad77b80f036fd210c28faa21e80ae6f4b092c","modified":1644826281084},{"_id":"public/archives/index.html","hash":"4a00f323a3f03e3de8822ec11f8040782b0ced26","modified":1644826281084},{"_id":"public/page/2/index.html","hash":"4a76dacd37a346bbd3863c66f1306244c1882a0a","modified":1644826281084},{"_id":"public/archives/archives/2/index.html","hash":"87045316873852bf1c905635d40727886bfd0e61","modified":1644826281084},{"_id":"public/archives/2020/index.html","hash":"55a16550444f79bf1f4078a3b1ac37a66577451a","modified":1644826281084},{"_id":"public/index.html","hash":"d2f0d0d38d8089092f4280d0371aa744c28b8a83","modified":1644826281085},{"_id":"public/archives/2020/03/index.html","hash":"1e8b883a1977309f172c83e6c71d3267cc85075e","modified":1644826281085},{"_id":"public/archives/2020/04/index.html","hash":"f5f934f770c6dbf028f34ce46a51ef745eaa5240","modified":1644826281085},{"_id":"public/archives/2020/05/index.html","hash":"3d757f603c98fef4fb717916bd21f721e6573f98","modified":1644826281085},{"_id":"public/archives/2020/06/index.html","hash":"5d7ca13e32e505ceeb181a5aee5128f64d5635ad","modified":1644826281085},{"_id":"public/archives/2020/07/index.html","hash":"a87051171d3860b032e8fa145f118da3d6c988f1","modified":1644826281085},{"_id":"public/archives/2020/10/index.html","hash":"eb51d37266b3e7193b90a1cd14bf207618b68082","modified":1644826281085},{"_id":"public/archives/2020/11/index.html","hash":"5571a0ef708a9570e3ed52e6dbfb957470b0f76b","modified":1644826281085},{"_id":"public/archives/2021/index.html","hash":"3bed4a1ce509b915d41b77dbff27a432f404499d","modified":1644826281085},{"_id":"public/archives/2021/05/index.html","hash":"14fc6badfff06195fafe2e9c48f0aa7e39c6e910","modified":1644826281085},{"_id":"public/archives/2021/07/index.html","hash":"3073c83b202f1f8ab7afaf002bf096a8a03483bc","modified":1644826281085},{"_id":"public/archives/2021/09/index.html","hash":"89499949598f60ba3454264d88e5b054599f5937","modified":1644826281086},{"_id":"public/archives/2021/10/index.html","hash":"b9535bf69f9a4247124282493fc0382a3019860a","modified":1644826281086},{"_id":"public/tags/BFC/index.html","hash":"470a3cc8690b1d0e1847314b5c15eae3c77a1007","modified":1644826281086},{"_id":"public/tags/边距重合/index.html","hash":"263c4b03d74c1c0e7f5383892c7407192403d36a","modified":1644826281086},{"_id":"public/tags/边距塌陷/index.html","hash":"fdea2b28bf251c4048a7ffa9ec7fa9020dfb92bd","modified":1644826281086},{"_id":"public/tags/css/index.html","hash":"6e811d28862fca9b9053873aa522822871c8d035","modified":1644826281086},{"_id":"public/tags/回归JS基础/index.html","hash":"946ec5aee3aaaca11488c51da7bc91d416429fba","modified":1644826281086},{"_id":"public/tags/工作中遇到的问题/index.html","hash":"7e58cc8087415db04943cbe283024f4763ab86c9","modified":1644826281087},{"_id":"public/tags/网络基础/index.html","hash":"a7dbff0afdfe945b5f3ab070c4088ca842cdac04","modified":1644826281087},{"_id":"public/tags/浏览器缓存/index.html","hash":"66528e8bc5f74dcf91c596faafdd8e62a361f552","modified":1644826281087},{"_id":"public/tags/http/index.html","hash":"d162e4aad3318ce9b0133d0d544b7a2121572cd7","modified":1644826281087},{"_id":"public/tags/flex弹性布局/index.html","hash":"e5becaa50e8645928c75e892bda9fe6a4442bda0","modified":1644826281087},{"_id":"public/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1644826281087},{"_id":"public/CNAME","hash":"ba3fba224d4bcb9fa4f74531817d57e580bffb1c","modified":1644826281087},{"_id":"public/img/header_img/about.jpg","hash":"30c7c4843b74afd972407b6797cf04c54a6ad2f4","modified":1644826281087},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1644826281087},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1644826281087},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1644826281087},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1644826281088},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1644826281088},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1644826281088},{"_id":"public/favicon.ico","hash":"ca2a4e7d041fa0a86b38a29ea6d2328d41e2da4e","modified":1644826281394},{"_id":"public/img/article_header/article_bg3.jpg","hash":"41b318cfc7f8c1e0a4a0dd18859976c8f46c4f00","modified":1644826281394},{"_id":"public/img/avatar/avatar.jpg","hash":"eab80038a5ebb0d736e730a126bd547c00e8cf71","modified":1644826281396},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1644826281396},{"_id":"public/img/header_img/about3.jpg","hash":"fcde77730a40808a22e9dc61b0453a2a10c5b1c8","modified":1644826281396},{"_id":"public/img/header_img/archive1.jpg","hash":"dd5a6b397a19772bcc37eda7d8b7c22848b606b9","modified":1644826281396},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1644826281403},{"_id":"public/css/highlight.css","hash":"c58b4569c086e477a00dcbf5a95a166fe5fecfb0","modified":1644826281403},{"_id":"public/css/rocket.css","hash":"ff363acbf4d07259228a37738221033665b28794","modified":1644826281403},{"_id":"public/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1644826281403},{"_id":"public/css/toc.css","hash":"f756b9e1b2208d2e5b0f3d2ac5e4fea3b7da0e10","modified":1644826281403},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1644826281403},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1644826281403},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1644826281403},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1644826281403},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1644826281403},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1644826281403},{"_id":"public/js/toc.js","hash":"6df6fb0a39ce2586b406dabf53e3a3e9681c5a54","modified":1644826281403},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1644826281403},{"_id":"public/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1644826281403},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1644826281404},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1644826281404},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1644826281404},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1644826281404},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1644826281404},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1644826281404},{"_id":"public/css/bootstrap.css","hash":"53e6ff9a1b3eebdef21499576f155922a291a94b","modified":1644826281404},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1644826281404},{"_id":"public/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1644826281404},{"_id":"public/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1644826281404},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1644826281408},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1644826281412},{"_id":"public/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1644826281423},{"_id":"public/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1644826281423},{"_id":"public/img/article_header/article_bg4.jpg","hash":"bbe665cdd63c6dfea670749d3642aad2dd03f6c1","modified":1644826281463},{"_id":"public/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1644826281466},{"_id":"public/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1644826281467},{"_id":"public/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1644826281482},{"_id":"public/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1644826281486},{"_id":"public/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1644826281491},{"_id":"public/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1644826281496},{"_id":"public/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1644826281500}],"Category":[{"name":"微信小程序","_id":"ckzmf3k3p0009wgq5ogjvtbvq"},{"name":"css","_id":"ckzmf3k3u000ewgq57z2ttgpj"}],"Data":[],"Page":[{"layout":"404","description":"这里空空如也，看看网址有没有问题~","header-img":"/img/header_img/404.png","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"这里空空如也，看看网址有没有问题~\"\nheader-img: \"/img/header_img/404.png\"\n---\n","date":"2021-04-23T01:26:04.801Z","updated":"2021-04-23T01:26:04.801Z","path":"404.html","title":"","comments":1,"_id":"ckzmf3k180000wgq5c01yt7z0","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2018-10-03T02:48:33.000Z","description":"","header-img":"/img/header_img/about3.jpg","aplayer":true,"fixed":false,"_content":" \n### 关于我\n\n>一个做前端的\n>喜欢敲代码\n>喜欢徒步\n>喜欢思考（有时候想太多）\n>热爱音乐\n\n  \n### 联系我\n\n>Email: kyootah@foxmail.com\n\n\n\n\n\n#### 来听听歌 Aimer粉~\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2018-10-03 10:48:33\ndescription: \"\"\nheader-img: \"/img/header_img/about3.jpg\"\naplayer: true\nfixed: false\n---\n \n### 关于我\n\n>一个做前端的\n>喜欢敲代码\n>喜欢徒步\n>喜欢思考（有时候想太多）\n>热爱音乐\n\n  \n### 联系我\n\n>Email: kyootah@foxmail.com\n\n\n\n\n\n#### 来听听歌 Aimer粉~\n","updated":"2022-02-11T09:21:46.341Z","path":"about/index.html","comments":1,"_id":"ckzmf3k3e0002wgq5y6yya1e8","content":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><blockquote>\n<p>一个做前端的<br>喜欢敲代码<br>喜欢徒步<br>喜欢思考（有时候想太多）<br>热爱音乐</p>\n</blockquote>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><blockquote>\n<p>Email: <a href=\"mailto:&#107;&#121;&#111;&#111;&#x74;&#97;&#104;&#64;&#102;&#111;&#x78;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;\" target=\"_blank\" rel=\"noopener\">&#107;&#121;&#111;&#111;&#x74;&#97;&#104;&#64;&#102;&#111;&#x78;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a></p>\n</blockquote>\n<h4 id=\"来听听歌-aimer粉~\"><a href=\"#来听听歌-Aimer粉\" class=\"headerlink\" title=\"来听听歌 Aimer粉~\"></a>来听听歌 Aimer粉~</h4>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><blockquote>\n<p>一个做前端的<br>喜欢敲代码<br>喜欢徒步<br>喜欢思考（有时候想太多）<br>热爱音乐</p>\n</blockquote>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><blockquote>\n<p>Email: <a href=\"mailto:&#107;&#121;&#111;&#111;&#x74;&#97;&#104;&#64;&#102;&#111;&#x78;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;\" target=\"_blank\" rel=\"noopener\">&#107;&#121;&#111;&#111;&#x74;&#97;&#104;&#64;&#102;&#111;&#x78;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a></p>\n</blockquote>\n<h4 id=\"来听听歌-Aimer粉\"><a href=\"#来听听歌-Aimer粉\" class=\"headerlink\" title=\"来听听歌 Aimer粉~\"></a>来听听歌 Aimer粉~</h4>"},{"layout":"archive","title":"Archives","header-img":"/img/header_img/archive1.jpg","comments":0,"date":"2018-09-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/img/header_img/archive1.jpg\"\ncomments: false\ndate: 2018-09-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2022-02-11T09:17:13.600Z","path":"archive/index.html","_id":"ckzmf3k3h0004wgq5vslnyg1x","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"/img/article_header/article_bg3.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/img/article_header/article_bg3.jpg\"\n---\n","date":"2022-02-14T08:10:19.636Z","updated":"2022-02-14T08:10:19.636Z","path":"tags/index.html","comments":1,"_id":"ckzmf3k3l0007wgq52rdb0wa2","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"BFC理解与应用","catalog":true,"date":"2021-09-08T06:21:05.000Z","subtitle":null,"header-img":null,"_content":"\n### 定意\n>在解释`BFC`之前，先说一下文档流。我们常说的文档流其实分为定位流、浮动流和普通流三种。而普通流其实就是指`BFC`中的`FC`。`FC`是`formatting context`的首字母缩写，直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。常见的FC有BFC、IFC，还有GFC和FFC。`BFC`是`block formatting context`，也就是块级格式化上下文，是用于布局块级盒子的一块渲染区域\n\n简单来说`BFC`是一个独立的区域，它内部的元素都依照它的规则渲染，不会与 BFC 外部打交道。\n\n### 如何触发\n* `float`:不为none \n* `overflow`:hidden | scroll | auto; （不是visible） \n* `display`:inline-block | table-cell | table-caption | flex | grid ;（ 非none 非inline 非block） \n* `position`: absolute | fiexed ;（ 非relative） \n可以简单理解成`OFDP`。\n\n### BFC布局规则 \n* 1.浮动的元素会被父级计算高度（父级触发了BFC）\n* 2.非浮动元素不会覆盖浮动元素位置（非浮动元素触发了BFC）\n* 3.margin不会传递给父级（父级触发了BFC）\n* 4.两个相邻元素上下margin会重叠（给其中一个元素增加一个父级，然后让他的父级触发BFC）\n\n### 可以解决什么问题\n\n#### 浮动元素父级高度塌陷问题\n```html\n<div class=\"father\"> \n  <div class=\"child\"></div>\n</div>  \n```\n```css\n.father{\n  width:200px;\n  background:#CCC; \n  border:4px solid #000;\n}\n.child{\n  width:100px;\n  height:100px;\n  float:left;\n  background:red; \n}\n```\n![](http://img.kyootah.com/2022/02/11/3bb61c98b5c8d.png)\n例如这里我们给定一个空间，将空间内的元素浮动，这时候会发现父级的高度并不会被撑开，这种情况就是我们常说的`高度塌陷`。\n我们可以利用`BFC`来解决这个问题，给父级设置一个`overflow:hidden`，触发`BFC`。\n```css\n.father{\n  width:200px;\n  background:#CCC; \n  border:4px solid #000;\n  overflow:hidden;\n}\n.child{\n  width:100px;\n  height:100px;\n  float:left;\n  background:red; \n}\n```\n \n\n\n![](http://img.kyootah.com/2022/02/11/28e96ce1f9180.png)\n这个时候可以看到我们的容器高度被撑开了,遵循BFC布局规则第1条: __计算BFC的高度时，浮动元素也参与计算__\n\n\n\n#### 元素被浮动元素覆盖问题\n```html\n<div class=\"aside\"></div>\n<div class=\"main\"></div>\n```\n```css\n.main{\n  width:200px;\n  height:200px;\n  background:#CCC;   \n}\n.aside{\n  width:100px;\n  height:100px;\n  float:left;\n  background:red; \n}\n```\n ![](http://img.kyootah.com/2022/02/11/2cdfaf30985e6.png)\n 可以看到当`aside`浮动了之后覆盖在了没设置浮动的`main`上。\n __为什么会这样__？因为BFC布局规则规定：__每个元素的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此__。因此，虽然存在浮动的元素`aside`，但main的左边依然会与包含块的左边相接触。\n__解决方法：利用`BFC`的规则非浮动元素不会覆盖浮动元素位置（非浮动元素触发了BFC）__,给`main`设置`overflow:hidden`。\n__适用场景__： 自适应多栏布局（避免多列布局由于宽度计算四舍五入而自动换行）\n ```css\n .main{\n  width:200px;\n  height:200px;\n  background:#CCC;   \n  overflow:hidden;\n}\n```\n![](http://img.kyootah.com/2022/02/11/d51a57d70ee73.png)\n\n#### margin重合问题\n```html\n<div class=\"father\">\n  <div class=\"child1\"></div>\n  <div class=\"child2\"></div>\n</div>\n```\n\n```css\n.father{\n  width:200px;\n  background:#ccc;\n}\n\n.child1{\n  width:100px;\n  height:100px;\n  background:red;\n  margin-bottom:10px;  \n}\n.child2{\n  width:100px;\n  height:100px;\n  background:red; \n  margin-top:10px; \n}\n```\n![](http://img.kyootah.com/2022/02/11/9c78fdbd677fc.png)\n例如上面两个`child`，分别设置了`margin-bottom`与`margin-top`10px，但实际效果是两个元素的间隔只有 __10px__ ,而非理想的 __20px__\n__解决方法__:给其中某个元素给定一个外层并触发BFC。\n\n```html\n<div class=\"father\">\n  <div class=\"child1\"></div>\n  <div class=\"wrap\">\n    <div class=\"child2\"></div>\n  </div>\n</div>\n```\n```css\n.wrap{\n  overflow: hidden;\n}\n```\n可以看到间距恢复正常了\n![](http://img.kyootah.com/2022/02/11/c1193823448c7.png)\n\n\n\n#### margin塌陷问题\n```html\n<div class=\"father\">\n  <div class=\"child\"></div> \n</div>\n```\n```css\n.father{\n  width:200px;\n  height:200px;\n  background:blue;\n  margin:60px;  \n}\n \n.child{\n  width:100px;\n  height:100px;\n  background:red;\n  margin:50px;  \n}\n```\n![](http://img.kyootah.com/2022/02/11/b599137ffb6bb.png)\n我们给定一个元素`father`并设置`margin:60px`，并在其中放入子元素`child`，设置` margin:50px`，可以看到水平上面的边距生效了，垂直方向没效果,这就是**外边距塌陷**现象\n**什么是margin外边距塌陷？**对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷**较大**的外边距值。\n**解决方法**：让父元素变成`BFC`,在`father`中加入`overflow:hidden;`\n效果：\n![](http://img.kyootah.com/2022/02/11/39a3214151401.png)\n\n ","source":"_posts/BFC理解与应用.md","raw":"---\ntitle: BFC理解与应用\ncatalog: true\ndate: 2021-09-08 14:21:05\nsubtitle:\nheader-img:\ntags:\n- BFC\n- 边距重合\n- 边距塌陷\n- css\n---\n\n### 定意\n>在解释`BFC`之前，先说一下文档流。我们常说的文档流其实分为定位流、浮动流和普通流三种。而普通流其实就是指`BFC`中的`FC`。`FC`是`formatting context`的首字母缩写，直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。常见的FC有BFC、IFC，还有GFC和FFC。`BFC`是`block formatting context`，也就是块级格式化上下文，是用于布局块级盒子的一块渲染区域\n\n简单来说`BFC`是一个独立的区域，它内部的元素都依照它的规则渲染，不会与 BFC 外部打交道。\n\n### 如何触发\n* `float`:不为none \n* `overflow`:hidden | scroll | auto; （不是visible） \n* `display`:inline-block | table-cell | table-caption | flex | grid ;（ 非none 非inline 非block） \n* `position`: absolute | fiexed ;（ 非relative） \n可以简单理解成`OFDP`。\n\n### BFC布局规则 \n* 1.浮动的元素会被父级计算高度（父级触发了BFC）\n* 2.非浮动元素不会覆盖浮动元素位置（非浮动元素触发了BFC）\n* 3.margin不会传递给父级（父级触发了BFC）\n* 4.两个相邻元素上下margin会重叠（给其中一个元素增加一个父级，然后让他的父级触发BFC）\n\n### 可以解决什么问题\n\n#### 浮动元素父级高度塌陷问题\n```html\n<div class=\"father\"> \n  <div class=\"child\"></div>\n</div>  \n```\n```css\n.father{\n  width:200px;\n  background:#CCC; \n  border:4px solid #000;\n}\n.child{\n  width:100px;\n  height:100px;\n  float:left;\n  background:red; \n}\n```\n![](http://img.kyootah.com/2022/02/11/3bb61c98b5c8d.png)\n例如这里我们给定一个空间，将空间内的元素浮动，这时候会发现父级的高度并不会被撑开，这种情况就是我们常说的`高度塌陷`。\n我们可以利用`BFC`来解决这个问题，给父级设置一个`overflow:hidden`，触发`BFC`。\n```css\n.father{\n  width:200px;\n  background:#CCC; \n  border:4px solid #000;\n  overflow:hidden;\n}\n.child{\n  width:100px;\n  height:100px;\n  float:left;\n  background:red; \n}\n```\n \n\n\n![](http://img.kyootah.com/2022/02/11/28e96ce1f9180.png)\n这个时候可以看到我们的容器高度被撑开了,遵循BFC布局规则第1条: __计算BFC的高度时，浮动元素也参与计算__\n\n\n\n#### 元素被浮动元素覆盖问题\n```html\n<div class=\"aside\"></div>\n<div class=\"main\"></div>\n```\n```css\n.main{\n  width:200px;\n  height:200px;\n  background:#CCC;   \n}\n.aside{\n  width:100px;\n  height:100px;\n  float:left;\n  background:red; \n}\n```\n ![](http://img.kyootah.com/2022/02/11/2cdfaf30985e6.png)\n 可以看到当`aside`浮动了之后覆盖在了没设置浮动的`main`上。\n __为什么会这样__？因为BFC布局规则规定：__每个元素的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此__。因此，虽然存在浮动的元素`aside`，但main的左边依然会与包含块的左边相接触。\n__解决方法：利用`BFC`的规则非浮动元素不会覆盖浮动元素位置（非浮动元素触发了BFC）__,给`main`设置`overflow:hidden`。\n__适用场景__： 自适应多栏布局（避免多列布局由于宽度计算四舍五入而自动换行）\n ```css\n .main{\n  width:200px;\n  height:200px;\n  background:#CCC;   \n  overflow:hidden;\n}\n```\n![](http://img.kyootah.com/2022/02/11/d51a57d70ee73.png)\n\n#### margin重合问题\n```html\n<div class=\"father\">\n  <div class=\"child1\"></div>\n  <div class=\"child2\"></div>\n</div>\n```\n\n```css\n.father{\n  width:200px;\n  background:#ccc;\n}\n\n.child1{\n  width:100px;\n  height:100px;\n  background:red;\n  margin-bottom:10px;  \n}\n.child2{\n  width:100px;\n  height:100px;\n  background:red; \n  margin-top:10px; \n}\n```\n![](http://img.kyootah.com/2022/02/11/9c78fdbd677fc.png)\n例如上面两个`child`，分别设置了`margin-bottom`与`margin-top`10px，但实际效果是两个元素的间隔只有 __10px__ ,而非理想的 __20px__\n__解决方法__:给其中某个元素给定一个外层并触发BFC。\n\n```html\n<div class=\"father\">\n  <div class=\"child1\"></div>\n  <div class=\"wrap\">\n    <div class=\"child2\"></div>\n  </div>\n</div>\n```\n```css\n.wrap{\n  overflow: hidden;\n}\n```\n可以看到间距恢复正常了\n![](http://img.kyootah.com/2022/02/11/c1193823448c7.png)\n\n\n\n#### margin塌陷问题\n```html\n<div class=\"father\">\n  <div class=\"child\"></div> \n</div>\n```\n```css\n.father{\n  width:200px;\n  height:200px;\n  background:blue;\n  margin:60px;  \n}\n \n.child{\n  width:100px;\n  height:100px;\n  background:red;\n  margin:50px;  \n}\n```\n![](http://img.kyootah.com/2022/02/11/b599137ffb6bb.png)\n我们给定一个元素`father`并设置`margin:60px`，并在其中放入子元素`child`，设置` margin:50px`，可以看到水平上面的边距生效了，垂直方向没效果,这就是**外边距塌陷**现象\n**什么是margin外边距塌陷？**对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷**较大**的外边距值。\n**解决方法**：让父元素变成`BFC`,在`father`中加入`overflow:hidden;`\n效果：\n![](http://img.kyootah.com/2022/02/11/39a3214151401.png)\n\n ","slug":"BFC理解与应用","published":1,"updated":"2022-02-11T09:04:12.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzmf3k390001wgq5pt9oppre","content":"<h3 id=\"定意\"><a href=\"#定意\" class=\"headerlink\" title=\"定意\"></a>定意</h3><blockquote>\n<p>在解释<code>BFC</code>之前，先说一下文档流。我们常说的文档流其实分为定位流、浮动流和普通流三种。而普通流其实就是指<code>BFC</code>中的<code>FC</code>。<code>FC</code>是<code>formatting context</code>的首字母缩写，直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。常见的FC有BFC、IFC，还有GFC和FFC。<code>BFC</code>是<code>block formatting context</code>，也就是块级格式化上下文，是用于布局块级盒子的一块渲染区域</p>\n</blockquote>\n<p>简单来说<code>BFC</code>是一个独立的区域，它内部的元素都依照它的规则渲染，不会与 BFC 外部打交道。</p>\n<h3 id=\"如何触发\"><a href=\"#如何触发\" class=\"headerlink\" title=\"如何触发\"></a>如何触发</h3><ul>\n<li><code>float</code>:不为none </li>\n<li><code>overflow</code>:hidden | scroll | auto; （不是visible） </li>\n<li><code>display</code>:inline-block | table-cell | table-caption | flex | grid ;（ 非none 非inline 非block） </li>\n<li><code>position</code>: absolute | fiexed ;（ 非relative）<br>可以简单理解成<code>OFDP</code>。</li>\n</ul>\n<h3 id=\"bfc布局规则\"><a href=\"#BFC布局规则\" class=\"headerlink\" title=\"BFC布局规则\"></a>BFC布局规则</h3><ul>\n<li>1.浮动的元素会被父级计算高度（父级触发了BFC）</li>\n<li>2.非浮动元素不会覆盖浮动元素位置（非浮动元素触发了BFC）</li>\n<li>3.margin不会传递给父级（父级触发了BFC）</li>\n<li>4.两个相邻元素上下margin会重叠（给其中一个元素增加一个父级，然后让他的父级触发BFC）</li>\n</ul>\n<h3 id=\"可以解决什么问题\"><a href=\"#可以解决什么问题\" class=\"headerlink\" title=\"可以解决什么问题\"></a>可以解决什么问题</h3><h4 id=\"浮动元素父级高度塌陷问题\"><a href=\"#浮动元素父级高度塌陷问题\" class=\"headerlink\" title=\"浮动元素父级高度塌陷问题\"></a>浮动元素父级高度塌陷问题</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#CCC</span>; </span><br><span class=\"line\">  <span class=\"attribute\">border</span>:<span class=\"number\">4px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.kyootah.com/2022/02/11/3bb61c98b5c8d.png\"><br>例如这里我们给定一个空间，将空间内的元素浮动，这时候会发现父级的高度并不会被撑开，这种情况就是我们常说的<code>高度塌陷</code>。<br>我们可以利用<code>BFC</code>来解决这个问题，给父级设置一个<code>overflow:hidden</code>，触发<code>BFC</code>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#CCC</span>; </span><br><span class=\"line\">  <span class=\"attribute\">border</span>:<span class=\"number\">4px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.kyootah.com/2022/02/11/28e96ce1f9180.png\"><br>这个时候可以看到我们的容器高度被撑开了,遵循BFC布局规则第1条: <strong>计算BFC的高度时，浮动元素也参与计算</strong></p>\n<h4 id=\"元素被浮动元素覆盖问题\"><a href=\"#元素被浮动元素覆盖问题\" class=\"headerlink\" title=\"元素被浮动元素覆盖问题\"></a>元素被浮动元素覆盖问题</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#CCC</span>;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.aside</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"http://img.kyootah.com/2022/02/11/2cdfaf30985e6.png\"><br> 可以看到当<code>aside</code>浮动了之后覆盖在了没设置浮动的<code>main</code>上。<br> __为什么会这样__？因为BFC布局规则规定：__每个元素的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此__。因此，虽然存在浮动的元素<code>aside</code>，但main的左边依然会与包含块的左边相接触。<br><strong>解决方法：利用<code>BFC</code>的规则非浮动元素不会覆盖浮动元素位置（非浮动元素触发了BFC）</strong>,给<code>main</code>设置<code>overflow:hidden</code>。<br>__适用场景__： 自适应多栏布局（避免多列布局由于宽度计算四舍五入而自动换行）<br> <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#CCC</span>;   </span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.kyootah.com/2022/02/11/d51a57d70ee73.png\"></p>\n<h4 id=\"margin重合问题\"><a href=\"#margin重合问题\" class=\"headerlink\" title=\"margin重合问题\"></a>margin重合问题</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.child1</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>:<span class=\"number\">10px</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child2</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red; </span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>:<span class=\"number\">10px</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.kyootah.com/2022/02/11/9c78fdbd677fc.png\"><br>例如上面两个<code>child</code>，分别设置了<code>margin-bottom</code>与<code>margin-top</code>10px，但实际效果是两个元素的间隔只有 <strong>10px</strong> ,而非理想的 <strong>20px</strong><br><strong>解决方法</strong>:给其中某个元素给定一个外层并触发BFC。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到间距恢复正常了<br><img src=\"http://img.kyootah.com/2022/02/11/c1193823448c7.png\"></p>\n<h4 id=\"margin塌陷问题\"><a href=\"#margin塌陷问题\" class=\"headerlink\" title=\"margin塌陷问题\"></a>margin塌陷问题</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:blue;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">60px</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.kyootah.com/2022/02/11/b599137ffb6bb.png\"><br>我们给定一个元素<code>father</code>并设置<code>margin:60px</code>，并在其中放入子元素<code>child</code>，设置<code> margin:50px</code>，可以看到水平上面的边距生效了，垂直方向没效果,这就是<strong>外边距塌陷</strong>现象<br><strong>什么是margin外边距塌陷？</strong>对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷<strong>较大</strong>的外边距值。<br><strong>解决方法</strong>：让父元素变成<code>BFC</code>,在<code>father</code>中加入<code>overflow:hidden;</code><br>效果：<br><img src=\"http://img.kyootah.com/2022/02/11/39a3214151401.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定意\"><a href=\"#定意\" class=\"headerlink\" title=\"定意\"></a>定意</h3><blockquote>\n<p>在解释<code>BFC</code>之前，先说一下文档流。我们常说的文档流其实分为定位流、浮动流和普通流三种。而普通流其实就是指<code>BFC</code>中的<code>FC</code>。<code>FC</code>是<code>formatting context</code>的首字母缩写，直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。常见的FC有BFC、IFC，还有GFC和FFC。<code>BFC</code>是<code>block formatting context</code>，也就是块级格式化上下文，是用于布局块级盒子的一块渲染区域</p>\n</blockquote>\n<p>简单来说<code>BFC</code>是一个独立的区域，它内部的元素都依照它的规则渲染，不会与 BFC 外部打交道。</p>\n<h3 id=\"如何触发\"><a href=\"#如何触发\" class=\"headerlink\" title=\"如何触发\"></a>如何触发</h3><ul>\n<li><code>float</code>:不为none </li>\n<li><code>overflow</code>:hidden | scroll | auto; （不是visible） </li>\n<li><code>display</code>:inline-block | table-cell | table-caption | flex | grid ;（ 非none 非inline 非block） </li>\n<li><code>position</code>: absolute | fiexed ;（ 非relative）<br>可以简单理解成<code>OFDP</code>。</li>\n</ul>\n<h3 id=\"BFC布局规则\"><a href=\"#BFC布局规则\" class=\"headerlink\" title=\"BFC布局规则\"></a>BFC布局规则</h3><ul>\n<li>1.浮动的元素会被父级计算高度（父级触发了BFC）</li>\n<li>2.非浮动元素不会覆盖浮动元素位置（非浮动元素触发了BFC）</li>\n<li>3.margin不会传递给父级（父级触发了BFC）</li>\n<li>4.两个相邻元素上下margin会重叠（给其中一个元素增加一个父级，然后让他的父级触发BFC）</li>\n</ul>\n<h3 id=\"可以解决什么问题\"><a href=\"#可以解决什么问题\" class=\"headerlink\" title=\"可以解决什么问题\"></a>可以解决什么问题</h3><h4 id=\"浮动元素父级高度塌陷问题\"><a href=\"#浮动元素父级高度塌陷问题\" class=\"headerlink\" title=\"浮动元素父级高度塌陷问题\"></a>浮动元素父级高度塌陷问题</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#CCC</span>; </span><br><span class=\"line\">  <span class=\"attribute\">border</span>:<span class=\"number\">4px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.kyootah.com/2022/02/11/3bb61c98b5c8d.png\"><br>例如这里我们给定一个空间，将空间内的元素浮动，这时候会发现父级的高度并不会被撑开，这种情况就是我们常说的<code>高度塌陷</code>。<br>我们可以利用<code>BFC</code>来解决这个问题，给父级设置一个<code>overflow:hidden</code>，触发<code>BFC</code>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#CCC</span>; </span><br><span class=\"line\">  <span class=\"attribute\">border</span>:<span class=\"number\">4px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.kyootah.com/2022/02/11/28e96ce1f9180.png\"><br>这个时候可以看到我们的容器高度被撑开了,遵循BFC布局规则第1条: <strong>计算BFC的高度时，浮动元素也参与计算</strong></p>\n<h4 id=\"元素被浮动元素覆盖问题\"><a href=\"#元素被浮动元素覆盖问题\" class=\"headerlink\" title=\"元素被浮动元素覆盖问题\"></a>元素被浮动元素覆盖问题</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#CCC</span>;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.aside</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"http://img.kyootah.com/2022/02/11/2cdfaf30985e6.png\"><br> 可以看到当<code>aside</code>浮动了之后覆盖在了没设置浮动的<code>main</code>上。<br> __为什么会这样__？因为BFC布局规则规定：__每个元素的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此__。因此，虽然存在浮动的元素<code>aside</code>，但main的左边依然会与包含块的左边相接触。<br><strong>解决方法：利用<code>BFC</code>的规则非浮动元素不会覆盖浮动元素位置（非浮动元素触发了BFC）</strong>,给<code>main</code>设置<code>overflow:hidden</code>。<br>__适用场景__： 自适应多栏布局（避免多列布局由于宽度计算四舍五入而自动换行）<br> <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#CCC</span>;   </span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.kyootah.com/2022/02/11/d51a57d70ee73.png\"></p>\n<h4 id=\"margin重合问题\"><a href=\"#margin重合问题\" class=\"headerlink\" title=\"margin重合问题\"></a>margin重合问题</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.child1</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>:<span class=\"number\">10px</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child2</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red; </span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>:<span class=\"number\">10px</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.kyootah.com/2022/02/11/9c78fdbd677fc.png\"><br>例如上面两个<code>child</code>，分别设置了<code>margin-bottom</code>与<code>margin-top</code>10px，但实际效果是两个元素的间隔只有 <strong>10px</strong> ,而非理想的 <strong>20px</strong><br><strong>解决方法</strong>:给其中某个元素给定一个外层并触发BFC。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到间距恢复正常了<br><img src=\"http://img.kyootah.com/2022/02/11/c1193823448c7.png\"></p>\n<h4 id=\"margin塌陷问题\"><a href=\"#margin塌陷问题\" class=\"headerlink\" title=\"margin塌陷问题\"></a>margin塌陷问题</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:blue;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">60px</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.kyootah.com/2022/02/11/b599137ffb6bb.png\"><br>我们给定一个元素<code>father</code>并设置<code>margin:60px</code>，并在其中放入子元素<code>child</code>，设置<code> margin:50px</code>，可以看到水平上面的边距生效了，垂直方向没效果,这就是<strong>外边距塌陷</strong>现象<br><strong>什么是margin外边距塌陷？</strong>对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷<strong>较大</strong>的外边距值。<br><strong>解决方法</strong>：让父元素变成<code>BFC</code>,在<code>father</code>中加入<code>overflow:hidden;</code><br>效果：<br><img src=\"http://img.kyootah.com/2022/02/11/39a3214151401.png\"></p>\n"},{"title":"ElementUI弹窗默认z-index层问题级","catalog":true,"toc_nav_num":false,"toc":false,"date":"2020-07-08T09:14:12.000Z","subtitle":null,"header-img":null,"_content":"\n\n\n>当我在Element的dailog组件中使用富文本编辑器tinymce-editor的时候发现图片上传弹窗的层级比Element组件的层级低了不少，导致显示被遮挡的情况，后来发现在引用的时候可以设置默认属性，记录一下加深印象。\n\ndailog组件默认会加上一个z-index\n![](http://upload.dreamgotrue.cn/2021/05/08/60f5654be8bc0.png)\n\n官网文档有说明这个问题\n```\nVue.use(Element, { size: 'small', zIndex: 3000 });\n```\n![](http://upload.dreamgotrue.cn/2021/05/08/b74f1f827cda1.png)\n\n","source":"_posts/ElementUI弹窗默认z-index层问题.md","raw":"---\ntitle: ElementUI弹窗默认z-index层问题级\ncatalog: true\ntoc_nav_num: false\ntoc: false\ndate: 2020-07-08 17:14:12\nsubtitle:\nheader-img:\ntags:\n- 工作中遇到的问题\n---\n\n\n\n>当我在Element的dailog组件中使用富文本编辑器tinymce-editor的时候发现图片上传弹窗的层级比Element组件的层级低了不少，导致显示被遮挡的情况，后来发现在引用的时候可以设置默认属性，记录一下加深印象。\n\ndailog组件默认会加上一个z-index\n![](http://upload.dreamgotrue.cn/2021/05/08/60f5654be8bc0.png)\n\n官网文档有说明这个问题\n```\nVue.use(Element, { size: 'small', zIndex: 3000 });\n```\n![](http://upload.dreamgotrue.cn/2021/05/08/b74f1f827cda1.png)\n\n","slug":"ElementUI弹窗默认z-index层问题","published":1,"updated":"2021-05-08T09:32:04.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzmf3k3f0003wgq5hzvaobge","content":"<blockquote>\n<p>当我在Element的dailog组件中使用富文本编辑器tinymce-editor的时候发现图片上传弹窗的层级比Element组件的层级低了不少，导致显示被遮挡的情况，后来发现在引用的时候可以设置默认属性，记录一下加深印象。</p>\n</blockquote>\n<p>dailog组件默认会加上一个z-index<br><img src=\"http://upload.dreamgotrue.cn/2021/05/08/60f5654be8bc0.png\"></p>\n<p>官网文档有说明这个问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(Element, &#123; size: &apos;small&apos;, zIndex: 3000 &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://upload.dreamgotrue.cn/2021/05/08/b74f1f827cda1.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>当我在Element的dailog组件中使用富文本编辑器tinymce-editor的时候发现图片上传弹窗的层级比Element组件的层级低了不少，导致显示被遮挡的情况，后来发现在引用的时候可以设置默认属性，记录一下加深印象。</p>\n</blockquote>\n<p>dailog组件默认会加上一个z-index<br><img src=\"http://upload.dreamgotrue.cn/2021/05/08/60f5654be8bc0.png\"></p>\n<p>官网文档有说明这个问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(Element, &#123; size: &apos;small&apos;, zIndex: 3000 &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://upload.dreamgotrue.cn/2021/05/08/b74f1f827cda1.png\"></p>\n"},{"title":"小程序原生组件页面层级问题","catalog":false,"date":"2020-03-27T08:33:54.000Z","subtitle":null,"header-img":null,"_content":"\n>为什么小程序 map、canvas、video、textarea  组件总是在最上层？\n\nmap、canvas、video、textarea 是由客户端创建的原生组件，原生组件的层级是最高的，所以页面中的其他组件无论设置 z-index 为多少，都无法盖在原生组件上。 原生组件暂时还无法放在 scroll-view 上，也无法对原生组件设置 css 动画,这个是小程序的设计问题。\n\n## 解决方法\n使用小程序提供的原生组件```cover-view```与```cover-image```替换需要置顶的```view```与```image```\n\n## 缺点\n```cover-view```与```cover-image```有很多缺陷，待官方更新\n[官方文档](https://developers.weixin.qq.com/miniprogram/dev/component/cover-view.html)","source":"_posts/小程序原生组件页面层级问题.md","raw":"---\ntitle: 小程序原生组件页面层级问题\ncatalog: false\ndate: 2020-03-27 16:33:54\nsubtitle:\nheader-img:\ncategories:\n- 微信小程序\ntags:\n- 工作中遇到的问题\n---\n\n>为什么小程序 map、canvas、video、textarea  组件总是在最上层？\n\nmap、canvas、video、textarea 是由客户端创建的原生组件，原生组件的层级是最高的，所以页面中的其他组件无论设置 z-index 为多少，都无法盖在原生组件上。 原生组件暂时还无法放在 scroll-view 上，也无法对原生组件设置 css 动画,这个是小程序的设计问题。\n\n## 解决方法\n使用小程序提供的原生组件```cover-view```与```cover-image```替换需要置顶的```view```与```image```\n\n## 缺点\n```cover-view```与```cover-image```有很多缺陷，待官方更新\n[官方文档](https://developers.weixin.qq.com/miniprogram/dev/component/cover-view.html)","slug":"小程序原生组件页面层级问题","published":1,"updated":"2021-07-27T08:46:25.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzmf3k3k0006wgq5oylte3zu","content":"<blockquote>\n<p>为什么小程序 map、canvas、video、textarea  组件总是在最上层？</p>\n</blockquote>\n<p>map、canvas、video、textarea 是由客户端创建的原生组件，原生组件的层级是最高的，所以页面中的其他组件无论设置 z-index 为多少，都无法盖在原生组件上。 原生组件暂时还无法放在 scroll-view 上，也无法对原生组件设置 css 动画,这个是小程序的设计问题。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>使用小程序提供的原生组件<code>cover-view</code>与<code>cover-image</code>替换需要置顶的<code>view</code>与<code>image</code></p>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><p><code>cover-view</code>与<code>cover-image</code>有很多缺陷，待官方更新<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/cover-view.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>为什么小程序 map、canvas、video、textarea  组件总是在最上层？</p>\n</blockquote>\n<p>map、canvas、video、textarea 是由客户端创建的原生组件，原生组件的层级是最高的，所以页面中的其他组件无论设置 z-index 为多少，都无法盖在原生组件上。 原生组件暂时还无法放在 scroll-view 上，也无法对原生组件设置 css 动画,这个是小程序的设计问题。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>使用小程序提供的原生组件<code>cover-view</code>与<code>cover-image</code>替换需要置顶的<code>view</code>与<code>image</code></p>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><p><code>cover-view</code>与<code>cover-image</code>有很多缺陷，待官方更新<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/cover-view.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n"},{"title":"【在JavaScript中理解数据结构】- 链表","catalog":true,"date":"2021-07-12T05:16:20.000Z","subtitle":null,"header-img":null,"_content":"\n>   \n\n###  \n\n ","source":"_posts/【在JavaScript中理解数据结构】链表.md","raw":"---\ntitle: 【在JavaScript中理解数据结构】- 链表\ncatalog: true\ndate: 2021-07-12 13:16:20\nsubtitle:\nheader-img:\ntags:\n- 回归JS基础\n---\n\n>   \n\n###  \n\n ","slug":"【在JavaScript中理解数据结构】链表","published":1,"updated":"2022-01-07T12:58:29.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzmf3k3m0008wgq5pl423i6o","content":"<blockquote>\n</blockquote>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n</blockquote>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3>"},{"title":"div横向排版的几种方式","catalog":true,"toc_nav_num":true,"date":"2020-04-12T13:30:45.000Z","toc":true,"_content":"\ndiv盒子本身默认样式属性是独占一行，平时将各个内容横向排版是最常见的操作，记录总结一下div的几种横向排列方法~\n\n<!--more-->\n\n以下面代码为例，列举下横向div排列的方法\n\n```\n<div class=\"wrap\">\n    <div class=\"item div1\">div1</div>\n    <div class=\"item div2\">div2</div>\n    <div class=\"item div3\">div3</div>\n</div>\n\n<style>\n.wrap{\n  width:500px;\n  background:#f0f0f0;\n}\n.wrap .item{\n  width:100px;\n  height:100px;\n  background:#ccc;\n  text-align:center;\n  line-height:100px;\n  margin:10px;\n}\n</style>\n```\n![image](http://upload.dreamgotrue.cn/2021/04/07/e52a3bb76424c.png)\n\n## 一、浮动\n\n```css\n.div1{\n    float:left;\n}\n.div2{\n    float:left;\n}\n.div3{\n    float:right;\n}\n```\n效果：\n![image](http://upload.dreamgotrue.cn/2021/04/07/5dc5bf37973d5.png)\n\nfloat 的特点：\n* 左右浮动同时用时，顺序就会出现颠倒\n* 不会撑开，可以看到wrap的背景颜色没了，height变成0\n* 字会环绕在浮动元素周围\n\n\n## 二、inline-block 行块标签\n\n```css\n.div1, .div2, .div3{\n    display: inline-block;\n}\n```\n![image](http://upload.dreamgotrue.cn/2021/04/07/eeafe59460bbe.png)\ninline-block存在的小问题：\n\n1. 用了display:inline-block后，存在间隙问题，间隙为4像素，这个问题产生的原因是换行引起的，因为我们写标签时通常会在标签结束符后顺手打个回车，而回车会产生回车符，回车符相当于空白符，通常情况下，多个连续的空白符会合并成一个空白符，而产生“空白间隙”的真正原因就是这个让我们并不怎么注意的空白符。\n  \n2. 去除空隙的方法:对父元素添加，{font-size:0}，即将字体大小设为0，那么那个空白符也变成0px，从而消除空隙\n \n\n ## 三、flex 弹性盒子\n\n```css\n.wrap{\n    display:flex;\n}\n```\n![image](http://upload.dreamgotrue.cn/2021/04/10/446ba728945a7.png)\n\n 可以通过 `justify-content` 属性调整子元素的水平对齐方式：\n\n* `flex-start`\t默认值。项目位于容器的开头。\t\n* `flex-end`\t项目位于容器的结尾。\t \n* `center`\t项目位于容器的中心。\t \n* `space-between`\t项目位于各行之间留有空白的容器内。\t \n* `space-around`\t项目位于各行之前、之间、之后都留有空白的容器内。\t \n* `initial`\t设置该属性为它的默认值。请参阅 initial。 \n* `inherit`\t从父元素继承该属性\n","source":"_posts/div横向排版的几种方式.md","raw":"---\ntitle: div横向排版的几种方式\ncatalog: true\ntoc_nav_num: true\ndate: 2020-04-12 21:30:45\ncategories:\n- css\ntags:\n- css\ntoc: true\n---\n\ndiv盒子本身默认样式属性是独占一行，平时将各个内容横向排版是最常见的操作，记录总结一下div的几种横向排列方法~\n\n<!--more-->\n\n以下面代码为例，列举下横向div排列的方法\n\n```\n<div class=\"wrap\">\n    <div class=\"item div1\">div1</div>\n    <div class=\"item div2\">div2</div>\n    <div class=\"item div3\">div3</div>\n</div>\n\n<style>\n.wrap{\n  width:500px;\n  background:#f0f0f0;\n}\n.wrap .item{\n  width:100px;\n  height:100px;\n  background:#ccc;\n  text-align:center;\n  line-height:100px;\n  margin:10px;\n}\n</style>\n```\n![image](http://upload.dreamgotrue.cn/2021/04/07/e52a3bb76424c.png)\n\n## 一、浮动\n\n```css\n.div1{\n    float:left;\n}\n.div2{\n    float:left;\n}\n.div3{\n    float:right;\n}\n```\n效果：\n![image](http://upload.dreamgotrue.cn/2021/04/07/5dc5bf37973d5.png)\n\nfloat 的特点：\n* 左右浮动同时用时，顺序就会出现颠倒\n* 不会撑开，可以看到wrap的背景颜色没了，height变成0\n* 字会环绕在浮动元素周围\n\n\n## 二、inline-block 行块标签\n\n```css\n.div1, .div2, .div3{\n    display: inline-block;\n}\n```\n![image](http://upload.dreamgotrue.cn/2021/04/07/eeafe59460bbe.png)\ninline-block存在的小问题：\n\n1. 用了display:inline-block后，存在间隙问题，间隙为4像素，这个问题产生的原因是换行引起的，因为我们写标签时通常会在标签结束符后顺手打个回车，而回车会产生回车符，回车符相当于空白符，通常情况下，多个连续的空白符会合并成一个空白符，而产生“空白间隙”的真正原因就是这个让我们并不怎么注意的空白符。\n  \n2. 去除空隙的方法:对父元素添加，{font-size:0}，即将字体大小设为0，那么那个空白符也变成0px，从而消除空隙\n \n\n ## 三、flex 弹性盒子\n\n```css\n.wrap{\n    display:flex;\n}\n```\n![image](http://upload.dreamgotrue.cn/2021/04/10/446ba728945a7.png)\n\n 可以通过 `justify-content` 属性调整子元素的水平对齐方式：\n\n* `flex-start`\t默认值。项目位于容器的开头。\t\n* `flex-end`\t项目位于容器的结尾。\t \n* `center`\t项目位于容器的中心。\t \n* `space-between`\t项目位于各行之间留有空白的容器内。\t \n* `space-around`\t项目位于各行之前、之间、之后都留有空白的容器内。\t \n* `initial`\t设置该属性为它的默认值。请参阅 initial。 \n* `inherit`\t从父元素继承该属性\n","slug":"div横向排版的几种方式","published":1,"updated":"2021-05-06T07:01:31.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzmf3k3p000awgq53vrn7yji","content":"<p>div盒子本身默认样式属性是独占一行，平时将各个内容横向排版是最常见的操作，记录总结一下div的几种横向排列方法~</p>\n<a id=\"more\"></a>\n\n<p>以下面代码为例，列举下横向div排列的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrap&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item div1&quot;&gt;div1&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item div2&quot;&gt;div2&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item div3&quot;&gt;div3&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.wrap&#123;</span><br><span class=\"line\">  width:500px;</span><br><span class=\"line\">  background:#f0f0f0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap .item&#123;</span><br><span class=\"line\">  width:100px;</span><br><span class=\"line\">  height:100px;</span><br><span class=\"line\">  background:#ccc;</span><br><span class=\"line\">  text-align:center;</span><br><span class=\"line\">  line-height:100px;</span><br><span class=\"line\">  margin:10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/07/e52a3bb76424c.png\" alt=\"image\"></p>\n<h2 id=\"一-浮动\"><a href=\"#一、浮动\" class=\"headerlink\" title=\"一、浮动\"></a>一、浮动</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.div2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.div3</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"http://upload.dreamgotrue.cn/2021/04/07/5dc5bf37973d5.png\" alt=\"image\"></p>\n<p>float 的特点：</p>\n<ul>\n<li>左右浮动同时用时，顺序就会出现颠倒</li>\n<li>不会撑开，可以看到wrap的背景颜色没了，height变成0</li>\n<li>字会环绕在浮动元素周围</li>\n</ul>\n<h2 id=\"二-inline-block-行块标签\"><a href=\"#二、inline-block-行块标签\" class=\"headerlink\" title=\"二、inline-block 行块标签\"></a>二、inline-block 行块标签</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div1</span>, <span class=\"selector-class\">.div2</span>, <span class=\"selector-class\">.div3</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/07/eeafe59460bbe.png\" alt=\"image\"><br>inline-block存在的小问题：</p>\n<ol>\n<li>用了display:inline-block后，存在间隙问题，间隙为4像素，这个问题产生的原因是换行引起的，因为我们写标签时通常会在标签结束符后顺手打个回车，而回车会产生回车符，回车符相当于空白符，通常情况下，多个连续的空白符会合并成一个空白符，而产生“空白间隙”的真正原因就是这个让我们并不怎么注意的空白符。</li>\n<li>去除空隙的方法:对父元素添加，{font-size:0}，即将字体大小设为0，那么那个空白符也变成0px，从而消除空隙</li>\n</ol>\n<h2 id=\"三-flex-弹性盒子\"><a href=\"#三、flex-弹性盒子\" class=\"headerlink\" title=\"三、flex 弹性盒子\"></a>三、flex 弹性盒子</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/10/446ba728945a7.png\" alt=\"image\"></p>\n<p> 可以通过 <code>justify-content</code> 属性调整子元素的水平对齐方式：</p>\n<ul>\n<li><code>flex-start</code>    默认值。项目位于容器的开头。    </li>\n<li><code>flex-end</code>    项目位于容器的结尾。     </li>\n<li><code>center</code>    项目位于容器的中心。     </li>\n<li><code>space-between</code>    项目位于各行之间留有空白的容器内。     </li>\n<li><code>space-around</code>    项目位于各行之前、之间、之后都留有空白的容器内。     </li>\n<li><code>initial</code>    设置该属性为它的默认值。请参阅 initial。 </li>\n<li><code>inherit</code>    从父元素继承该属性</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>div盒子本身默认样式属性是独占一行，平时将各个内容横向排版是最常见的操作，记录总结一下div的几种横向排列方法~</p>","more":"<p>以下面代码为例，列举下横向div排列的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrap&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item div1&quot;&gt;div1&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item div2&quot;&gt;div2&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item div3&quot;&gt;div3&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.wrap&#123;</span><br><span class=\"line\">  width:500px;</span><br><span class=\"line\">  background:#f0f0f0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap .item&#123;</span><br><span class=\"line\">  width:100px;</span><br><span class=\"line\">  height:100px;</span><br><span class=\"line\">  background:#ccc;</span><br><span class=\"line\">  text-align:center;</span><br><span class=\"line\">  line-height:100px;</span><br><span class=\"line\">  margin:10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/07/e52a3bb76424c.png\" alt=\"image\"></p>\n<h2 id=\"一、浮动\"><a href=\"#一、浮动\" class=\"headerlink\" title=\"一、浮动\"></a>一、浮动</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.div2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.div3</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"http://upload.dreamgotrue.cn/2021/04/07/5dc5bf37973d5.png\" alt=\"image\"></p>\n<p>float 的特点：</p>\n<ul>\n<li>左右浮动同时用时，顺序就会出现颠倒</li>\n<li>不会撑开，可以看到wrap的背景颜色没了，height变成0</li>\n<li>字会环绕在浮动元素周围</li>\n</ul>\n<h2 id=\"二、inline-block-行块标签\"><a href=\"#二、inline-block-行块标签\" class=\"headerlink\" title=\"二、inline-block 行块标签\"></a>二、inline-block 行块标签</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div1</span>, <span class=\"selector-class\">.div2</span>, <span class=\"selector-class\">.div3</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/07/eeafe59460bbe.png\" alt=\"image\"><br>inline-block存在的小问题：</p>\n<ol>\n<li>用了display:inline-block后，存在间隙问题，间隙为4像素，这个问题产生的原因是换行引起的，因为我们写标签时通常会在标签结束符后顺手打个回车，而回车会产生回车符，回车符相当于空白符，通常情况下，多个连续的空白符会合并成一个空白符，而产生“空白间隙”的真正原因就是这个让我们并不怎么注意的空白符。</li>\n<li>去除空隙的方法:对父元素添加，{font-size:0}，即将字体大小设为0，那么那个空白符也变成0px，从而消除空隙</li>\n</ol>\n<h2 id=\"三、flex-弹性盒子\"><a href=\"#三、flex-弹性盒子\" class=\"headerlink\" title=\"三、flex 弹性盒子\"></a>三、flex 弹性盒子</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/10/446ba728945a7.png\" alt=\"image\"></p>\n<p> 可以通过 <code>justify-content</code> 属性调整子元素的水平对齐方式：</p>\n<ul>\n<li><code>flex-start</code>    默认值。项目位于容器的开头。    </li>\n<li><code>flex-end</code>    项目位于容器的结尾。     </li>\n<li><code>center</code>    项目位于容器的中心。     </li>\n<li><code>space-between</code>    项目位于各行之间留有空白的容器内。     </li>\n<li><code>space-around</code>    项目位于各行之前、之间、之后都留有空白的容器内。     </li>\n<li><code>initial</code>    设置该属性为它的默认值。请参阅 initial。 </li>\n<li><code>inherit</code>    从父元素继承该属性</li>\n</ul>"},{"title":"解决在scroll-view中使用sticky无效","date":"2020-10-16T01:52:26.000Z","_content":"\n>在小程序的scroll-view使用直接sticky粘性定位会出现无效问题。解决方法：用一个view包住所有子项。\n\n<!-- more -->\n\n```css\n.container{\n  width: 100%;\n  height: 800rpx;\n}\n.header {\n  position: sticky;\n  position: -webkit-sticky;\n  top: 0;\n  width: 100%;\n  height: 120rpx;\n  background-color: black;\n}\n.content {\n  width: 100%;\n  height: 3000rpx;\n  background-color: red;\n} \n```\n```xml\n<scroll-view class=\"container\">\n  <view>\n    <view class=\"header\"></view>  \n    <view class=\"content\"></view>\n  </view>\n</scroll-view>\n```\n","source":"_posts/在scroll-view中使用sticky.md","raw":"---\ntitle: 解决在scroll-view中使用sticky无效\ndate: 2020-10-16 09:52:26\ncategories:\n- 微信小程序\ntags:\n- 工作中遇到的问题\n# thumbnail:\n---\n\n>在小程序的scroll-view使用直接sticky粘性定位会出现无效问题。解决方法：用一个view包住所有子项。\n\n<!-- more -->\n\n```css\n.container{\n  width: 100%;\n  height: 800rpx;\n}\n.header {\n  position: sticky;\n  position: -webkit-sticky;\n  top: 0;\n  width: 100%;\n  height: 120rpx;\n  background-color: black;\n}\n.content {\n  width: 100%;\n  height: 3000rpx;\n  background-color: red;\n} \n```\n```xml\n<scroll-view class=\"container\">\n  <view>\n    <view class=\"header\"></view>  \n    <view class=\"content\"></view>\n  </view>\n</scroll-view>\n```\n","slug":"在scroll-view中使用sticky","published":1,"updated":"2021-05-08T09:35:04.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzmf3k3s000cwgq5uuxvutzp","content":"<blockquote>\n<p>在小程序的scroll-view使用直接sticky粘性定位会出现无效问题。解决方法：用一个view包住所有子项。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">800</span>rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: sticky;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: -webkit-sticky;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">120</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">3000</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scroll-view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在小程序的scroll-view使用直接sticky粘性定位会出现无效问题。解决方法：用一个view包住所有子项。</p>\n</blockquote>","more":"<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">800</span>rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: sticky;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: -webkit-sticky;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">120</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">3000</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scroll-view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"微信小程序后台播放音频","catalog":true,"toc_nav_num":true,"date":"2020-11-02T02:46:27.000Z","_content":"\n微信小程序播放音频途中息屏继续播放，或者后台接收消息提醒功能配置。\n\n<!-- more -->\n\n### 全局配置\n实现后台播放须在`app.js`中做出声明，[官方文档](https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#requiredBackgroundModes)。\n\n```js\n\"requiredBackgroundModes\": [\n    \"audio\"\n  ],\n```\n\n### 播放音频方法改动\n要后台播放音频不能用`audio`组件，须换成[api](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.html)形式播放音频。\n```js\nconst backgroundAudioManager = wx.getBackgroundAudioManager()\n\nbackgroundAudioManager.title = '标题'\nbackgroundAudioManager.epname = '此时此刻'\nbackgroundAudioManager.singer = '作者'\nbackgroundAudioManager.coverImgUrl = 'http://y.gtimg.cn/music/photo_new/T002R300x300M000003rsKF44GyaSk.jpg?max_age=2592000'\n// 设置了 src 之后会自动播放\nbackgroundAudioManager.src = 'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E061FF02C31F716658E5C81F5594D561F2E88B854E81CAAB7806D5E4F103E55D33C16F3FAC506D1AB172DE8600B37E43FAD&fromtag=46'\n```\n\n### 监听息屏或切后台\n使用`onHide`方法来监听切后台，使用`play()`方法继续播放。\n```js\nonHide(){\n    backgroundAudioManager.play()\n}\n```\n\n### 附注：uniapp开发全局设置\nuniapp小程序项目可以到`manifest.json`配置文件中的源码视图添加`\"requiredBackgroundModes\": [\"audio\"]`。\n```js\n   /* 小程序特有相关 */\n    \"mp-weixin\" : {\n        \"appid\" : \"******\",\n        \"usingComponents\" : true,\n\t\t \"requiredBackgroundModes\": [\"audio\"],\n        \"permission\" : {\n\t\t\t\"requiredBackgroundModes\" : [ \"audio\" ],\n            \"scope.userLocation\" : {\n                \"desc\" : \"获取地理位置信息\"\n            }\n        },\n        \"setting\" : {\n            \"urlCheck\" : false,\n            \"es6\" : true,\n            \"minified\" : true\n        }\n    },\n```","source":"_posts/微信小程序后台播放音频.md","raw":"---\ntitle: 微信小程序后台播放音频\ncatalog: true\ntoc_nav_num: true\ndate: 2020-11-02 10:46:27\ncategories:\n- 微信小程序\ntags:\n- 工作中遇到的问题\n---\n\n微信小程序播放音频途中息屏继续播放，或者后台接收消息提醒功能配置。\n\n<!-- more -->\n\n### 全局配置\n实现后台播放须在`app.js`中做出声明，[官方文档](https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#requiredBackgroundModes)。\n\n```js\n\"requiredBackgroundModes\": [\n    \"audio\"\n  ],\n```\n\n### 播放音频方法改动\n要后台播放音频不能用`audio`组件，须换成[api](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.html)形式播放音频。\n```js\nconst backgroundAudioManager = wx.getBackgroundAudioManager()\n\nbackgroundAudioManager.title = '标题'\nbackgroundAudioManager.epname = '此时此刻'\nbackgroundAudioManager.singer = '作者'\nbackgroundAudioManager.coverImgUrl = 'http://y.gtimg.cn/music/photo_new/T002R300x300M000003rsKF44GyaSk.jpg?max_age=2592000'\n// 设置了 src 之后会自动播放\nbackgroundAudioManager.src = 'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E061FF02C31F716658E5C81F5594D561F2E88B854E81CAAB7806D5E4F103E55D33C16F3FAC506D1AB172DE8600B37E43FAD&fromtag=46'\n```\n\n### 监听息屏或切后台\n使用`onHide`方法来监听切后台，使用`play()`方法继续播放。\n```js\nonHide(){\n    backgroundAudioManager.play()\n}\n```\n\n### 附注：uniapp开发全局设置\nuniapp小程序项目可以到`manifest.json`配置文件中的源码视图添加`\"requiredBackgroundModes\": [\"audio\"]`。\n```js\n   /* 小程序特有相关 */\n    \"mp-weixin\" : {\n        \"appid\" : \"******\",\n        \"usingComponents\" : true,\n\t\t \"requiredBackgroundModes\": [\"audio\"],\n        \"permission\" : {\n\t\t\t\"requiredBackgroundModes\" : [ \"audio\" ],\n            \"scope.userLocation\" : {\n                \"desc\" : \"获取地理位置信息\"\n            }\n        },\n        \"setting\" : {\n            \"urlCheck\" : false,\n            \"es6\" : true,\n            \"minified\" : true\n        }\n    },\n```","slug":"微信小程序后台播放音频","published":1,"updated":"2021-05-06T07:00:59.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzmf3k3t000dwgq5l8gmdxqc","content":"<p>微信小程序播放音频途中息屏继续播放，或者后台接收消息提醒功能配置。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h3><p>实现后台播放须在<code>app.js</code>中做出声明，<a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#requiredBackgroundModes\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"requiredBackgroundModes\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"audio\"</span></span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"播放音频方法改动\"><a href=\"#播放音频方法改动\" class=\"headerlink\" title=\"播放音频方法改动\"></a>播放音频方法改动</h3><p>要后台播放音频不能用<code>audio</code>组件，须换成<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.html\" target=\"_blank\" rel=\"noopener\">api</a>形式播放音频。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> backgroundAudioManager = wx.getBackgroundAudioManager()</span><br><span class=\"line\"></span><br><span class=\"line\">backgroundAudioManager.title = <span class=\"string\">'标题'</span></span><br><span class=\"line\">backgroundAudioManager.epname = <span class=\"string\">'此时此刻'</span></span><br><span class=\"line\">backgroundAudioManager.singer = <span class=\"string\">'作者'</span></span><br><span class=\"line\">backgroundAudioManager.coverImgUrl = <span class=\"string\">'http://y.gtimg.cn/music/photo_new/T002R300x300M000003rsKF44GyaSk.jpg?max_age=2592000'</span></span><br><span class=\"line\"><span class=\"comment\">// 设置了 src 之后会自动播放</span></span><br><span class=\"line\">backgroundAudioManager.src = <span class=\"string\">'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&amp;uin=346897220&amp;vkey=6292F51E1E384E061FF02C31F716658E5C81F5594D561F2E88B854E81CAAB7806D5E4F103E55D33C16F3FAC506D1AB172DE8600B37E43FAD&amp;fromtag=46'</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"监听息屏或切后台\"><a href=\"#监听息屏或切后台\" class=\"headerlink\" title=\"监听息屏或切后台\"></a>监听息屏或切后台</h3><p>使用<code>onHide</code>方法来监听切后台，使用<code>play()</code>方法继续播放。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onHide()&#123;</span><br><span class=\"line\">    backgroundAudioManager.play()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"附注uniapp开发全局设置\"><a href=\"#附注：uniapp开发全局设置\" class=\"headerlink\" title=\"附注：uniapp开发全局设置\"></a>附注：uniapp开发全局设置</h3><p>uniapp小程序项目可以到<code>manifest.json</code>配置文件中的源码视图添加<code>&quot;requiredBackgroundModes&quot;: [&quot;audio&quot;]</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 小程序特有相关 */</span></span><br><span class=\"line\"> <span class=\"string\">\"mp-weixin\"</span> : &#123;</span><br><span class=\"line\">     <span class=\"string\">\"appid\"</span> : <span class=\"string\">\"******\"</span>,</span><br><span class=\"line\">     <span class=\"string\">\"usingComponents\"</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"requiredBackgroundModes\"</span>: [<span class=\"string\">\"audio\"</span>],</span><br><span class=\"line\">     <span class=\"string\">\"permission\"</span> : &#123;</span><br><span class=\"line\"><span class=\"string\">\"requiredBackgroundModes\"</span> : [ <span class=\"string\">\"audio\"</span> ],</span><br><span class=\"line\">         <span class=\"string\">\"scope.userLocation\"</span> : &#123;</span><br><span class=\"line\">             <span class=\"string\">\"desc\"</span> : <span class=\"string\">\"获取地理位置信息\"</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     <span class=\"string\">\"setting\"</span> : &#123;</span><br><span class=\"line\">         <span class=\"string\">\"urlCheck\"</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">         <span class=\"string\">\"es6\"</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">         <span class=\"string\">\"minified\"</span> : <span class=\"literal\">true</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>微信小程序播放音频途中息屏继续播放，或者后台接收消息提醒功能配置。</p>","more":"<h3 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h3><p>实现后台播放须在<code>app.js</code>中做出声明，<a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#requiredBackgroundModes\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"requiredBackgroundModes\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"audio\"</span></span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"播放音频方法改动\"><a href=\"#播放音频方法改动\" class=\"headerlink\" title=\"播放音频方法改动\"></a>播放音频方法改动</h3><p>要后台播放音频不能用<code>audio</code>组件，须换成<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.html\" target=\"_blank\" rel=\"noopener\">api</a>形式播放音频。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> backgroundAudioManager = wx.getBackgroundAudioManager()</span><br><span class=\"line\"></span><br><span class=\"line\">backgroundAudioManager.title = <span class=\"string\">'标题'</span></span><br><span class=\"line\">backgroundAudioManager.epname = <span class=\"string\">'此时此刻'</span></span><br><span class=\"line\">backgroundAudioManager.singer = <span class=\"string\">'作者'</span></span><br><span class=\"line\">backgroundAudioManager.coverImgUrl = <span class=\"string\">'http://y.gtimg.cn/music/photo_new/T002R300x300M000003rsKF44GyaSk.jpg?max_age=2592000'</span></span><br><span class=\"line\"><span class=\"comment\">// 设置了 src 之后会自动播放</span></span><br><span class=\"line\">backgroundAudioManager.src = <span class=\"string\">'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&amp;uin=346897220&amp;vkey=6292F51E1E384E061FF02C31F716658E5C81F5594D561F2E88B854E81CAAB7806D5E4F103E55D33C16F3FAC506D1AB172DE8600B37E43FAD&amp;fromtag=46'</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"监听息屏或切后台\"><a href=\"#监听息屏或切后台\" class=\"headerlink\" title=\"监听息屏或切后台\"></a>监听息屏或切后台</h3><p>使用<code>onHide</code>方法来监听切后台，使用<code>play()</code>方法继续播放。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onHide()&#123;</span><br><span class=\"line\">    backgroundAudioManager.play()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"附注：uniapp开发全局设置\"><a href=\"#附注：uniapp开发全局设置\" class=\"headerlink\" title=\"附注：uniapp开发全局设置\"></a>附注：uniapp开发全局设置</h3><p>uniapp小程序项目可以到<code>manifest.json</code>配置文件中的源码视图添加<code>&quot;requiredBackgroundModes&quot;: [&quot;audio&quot;]</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 小程序特有相关 */</span></span><br><span class=\"line\"> <span class=\"string\">\"mp-weixin\"</span> : &#123;</span><br><span class=\"line\">     <span class=\"string\">\"appid\"</span> : <span class=\"string\">\"******\"</span>,</span><br><span class=\"line\">     <span class=\"string\">\"usingComponents\"</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"requiredBackgroundModes\"</span>: [<span class=\"string\">\"audio\"</span>],</span><br><span class=\"line\">     <span class=\"string\">\"permission\"</span> : &#123;</span><br><span class=\"line\"><span class=\"string\">\"requiredBackgroundModes\"</span> : [ <span class=\"string\">\"audio\"</span> ],</span><br><span class=\"line\">         <span class=\"string\">\"scope.userLocation\"</span> : &#123;</span><br><span class=\"line\">             <span class=\"string\">\"desc\"</span> : <span class=\"string\">\"获取地理位置信息\"</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     <span class=\"string\">\"setting\"</span> : &#123;</span><br><span class=\"line\">         <span class=\"string\">\"urlCheck\"</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">         <span class=\"string\">\"es6\"</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">         <span class=\"string\">\"minified\"</span> : <span class=\"literal\">true</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>"},{"title":"理解浏览器缓存与存取流程","catalog":true,"date":"2021-10-02T12:16:10.000Z","subtitle":null,"header-img":null,"_content":"\n> 在解析URL之后浏览器根据缓存（强缓存、协商缓存）规则来决定是否取用缓存还是加载服务器资源来进行加载。\n\n## 强缓存\n强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。\n强缓存又分为两种：`Expires`和`Cache-Control`\n![](http://img.kyootah.com/2022/02/12/ab29c20beebcc.png)\n### 强缓存验证\n* 验证位置：**本地**（内存或者硬盘，根据浏览器策略决定）\n* 验证字段：`expires` (http1.0中出现)和`cache-control` (http1.1中出现)两个，**如果这两个字段同时出现，cache-control会覆盖expires**\n* 验证流程： 查看两个字段的指定时间，如果过期则跳到下一阶段（协商缓存）\n* 如果命中： 状态码：200 (from disk cache)或是200 OK (from memory cache) **注：根据该缓存的内存占用进行存储，内存占用过高则存入磁盘**\n\n\n### cache-control参数\n>常用参数：\n`private`：客户端可以缓存\n`public`：客户端和代理服务器均可缓存；\n`max-age=xxx`：缓存的资源将在 xxx 秒后过期，常见：2592000（三十天）、31536000（一年）；\n`no-cache`：跳过当前强验证步骤，使用下一阶段协商缓存来验证是否过期；\n`must-revalidate`：如果强缓存时间过期，必须去服务器进行有效性检验这个旧的缓存\n`no-transform`：多用于图片，不允许对资源进行转换压缩\n\n其他参数：\n- 请求头：\n    - **no-cache**：告知 (代理) 服务器不直接使用缓存，要求向原服务器发起请求\n    - **no-store**：所有内容都不会被保存到缓存或 Internet 临时文件中\n    - **max-age=delta-seconds**：告知服务器客户端希望接收一个存在时间不大于 delta-secconds 秒的资源\n    - **max-stale=delta-seconds**：告知 (代理) 服务器客户端愿意接收一个超过缓存时间的资源，若有定义 delta-seconds 则为 delta-seconds 秒，若没有则为任意超出时间\n    - **min-fresh=delta-seconds**：告知 (代理) 服务器客户端希望接收一个在小于 delta-seconds 秒内被更新过的资源\n    - **no-transform**：告知 (代理) 服务器客户端希望获取实体数据没有被转换 (比如压缩) 过的资源\n    - **noly-if-cached**：告知 (代理) 服务器客户端希望获取缓存的内容(若有), 而不用向原服务器发去请求\n    - **cache-extension**：自定义扩展值，若服务器不识别该值将被忽略掉\n- 响应头：\n    - **public**：表明任何情况下都得缓存该资源 (即使是需要 HTTP 认证的资源)\n    - **Private=field-name**：表明返回报文中全部或部分 (若指定了 field-name 则为 field-name 的字段数据) 仅开放给某些用户 (服务器指定的 share-user，如代理服务器) 做缓存使用，其他用户则不能缓存这些数据\n    - **no-cache**：不直接使用缓存，要求向服务器发起 (新鲜度校验) 请求\n    - **no-store**：所有内容都不会被保存到缓存或 Internet 临时文件中\n    - **no-transform**：告知客户端缓存文件时不得对实体数据做任何改变\n    - **noly-if-cached**：告知 (代理) 服务器客户端希望获取缓存的内容(若有), 而不用向原服务器发去请求\n    - **must-revalidate**：当前资源一定是向原方法服务器发去验证请求的，如请求是吧会返回 504(而非代理服务器上的缓存)\n    - **proxy-revalidate**：与 must-revalidate 类似，但仅能应用于共享缓存 (如代理)\n    - **max-age=delta-seconds**：告知客户端该资源在 delta-seconds 秒内是新鲜的，无需向服务器发请求\n    - **s-maxage=delta-seconds**：同 max-age，但仅能应用于共享缓存 (如代理)\n    - **cache-extension**：自定义扩展值，若服务器不识别该值将被忽略掉\n\n## 协商缓存\n协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。\n   \n\n### 协商缓存验证\n* 验证位置：**服务器**\n* 验证字段：有两组，`Last-Modified(响应头) + If-Modified-Since(请求头)`和`ETag(响应头) + If-None-Match(请求头)`,**如果两种方式都支持的话，服务器会优先考虑 ETag**\n* 验证流程如下\n![](http://img.kyootah.com/2022/02/12/cedcec762c907.png)\n\n     \n* **Last-Modified(响应头) + If-Modified-Since(请求头)**\n在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段。\n浏览器接收到后，如果再次请求，会在请求头中携带`If-Modified-Since`字段，这个字段的值也就是服务器传来的最后修改时间。\n服务器拿到请求头中的`If-Modified-Since`的字段后，其实会和这个服务器中该资源的最后修改时间`Last-Modified`对比, 询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来。但是如果在本地打开缓存文件，就会造成 `Last-Modified` 被修改，所以在 HTTP / 1.1 出现了 `ETag`。\n\n* **ETag(响应头)、If-None-Match(请求头)**\n`ETag`是服务器根据当前文件的内容，给文件生成的**唯一标识**，只要里面的内容有改动，这个值就会变。服务器通过响应头把这个值给浏览器。\n浏览器接收到 `ETag` 的值，会在下次请求时，将这个值作为`If-None-Match`这个字段的内容，并放到请求头中，然后发给服务器。","source":"_posts/浏览器缓存.md","raw":"---\ntitle: 理解浏览器缓存与存取流程\ncatalog: true \ndate: 2021-10-02 20:16:10\nsubtitle:\nheader-img:\ntags:\n- 网络基础\n- 浏览器缓存\n---\n\n> 在解析URL之后浏览器根据缓存（强缓存、协商缓存）规则来决定是否取用缓存还是加载服务器资源来进行加载。\n\n## 强缓存\n强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。\n强缓存又分为两种：`Expires`和`Cache-Control`\n![](http://img.kyootah.com/2022/02/12/ab29c20beebcc.png)\n### 强缓存验证\n* 验证位置：**本地**（内存或者硬盘，根据浏览器策略决定）\n* 验证字段：`expires` (http1.0中出现)和`cache-control` (http1.1中出现)两个，**如果这两个字段同时出现，cache-control会覆盖expires**\n* 验证流程： 查看两个字段的指定时间，如果过期则跳到下一阶段（协商缓存）\n* 如果命中： 状态码：200 (from disk cache)或是200 OK (from memory cache) **注：根据该缓存的内存占用进行存储，内存占用过高则存入磁盘**\n\n\n### cache-control参数\n>常用参数：\n`private`：客户端可以缓存\n`public`：客户端和代理服务器均可缓存；\n`max-age=xxx`：缓存的资源将在 xxx 秒后过期，常见：2592000（三十天）、31536000（一年）；\n`no-cache`：跳过当前强验证步骤，使用下一阶段协商缓存来验证是否过期；\n`must-revalidate`：如果强缓存时间过期，必须去服务器进行有效性检验这个旧的缓存\n`no-transform`：多用于图片，不允许对资源进行转换压缩\n\n其他参数：\n- 请求头：\n    - **no-cache**：告知 (代理) 服务器不直接使用缓存，要求向原服务器发起请求\n    - **no-store**：所有内容都不会被保存到缓存或 Internet 临时文件中\n    - **max-age=delta-seconds**：告知服务器客户端希望接收一个存在时间不大于 delta-secconds 秒的资源\n    - **max-stale=delta-seconds**：告知 (代理) 服务器客户端愿意接收一个超过缓存时间的资源，若有定义 delta-seconds 则为 delta-seconds 秒，若没有则为任意超出时间\n    - **min-fresh=delta-seconds**：告知 (代理) 服务器客户端希望接收一个在小于 delta-seconds 秒内被更新过的资源\n    - **no-transform**：告知 (代理) 服务器客户端希望获取实体数据没有被转换 (比如压缩) 过的资源\n    - **noly-if-cached**：告知 (代理) 服务器客户端希望获取缓存的内容(若有), 而不用向原服务器发去请求\n    - **cache-extension**：自定义扩展值，若服务器不识别该值将被忽略掉\n- 响应头：\n    - **public**：表明任何情况下都得缓存该资源 (即使是需要 HTTP 认证的资源)\n    - **Private=field-name**：表明返回报文中全部或部分 (若指定了 field-name 则为 field-name 的字段数据) 仅开放给某些用户 (服务器指定的 share-user，如代理服务器) 做缓存使用，其他用户则不能缓存这些数据\n    - **no-cache**：不直接使用缓存，要求向服务器发起 (新鲜度校验) 请求\n    - **no-store**：所有内容都不会被保存到缓存或 Internet 临时文件中\n    - **no-transform**：告知客户端缓存文件时不得对实体数据做任何改变\n    - **noly-if-cached**：告知 (代理) 服务器客户端希望获取缓存的内容(若有), 而不用向原服务器发去请求\n    - **must-revalidate**：当前资源一定是向原方法服务器发去验证请求的，如请求是吧会返回 504(而非代理服务器上的缓存)\n    - **proxy-revalidate**：与 must-revalidate 类似，但仅能应用于共享缓存 (如代理)\n    - **max-age=delta-seconds**：告知客户端该资源在 delta-seconds 秒内是新鲜的，无需向服务器发请求\n    - **s-maxage=delta-seconds**：同 max-age，但仅能应用于共享缓存 (如代理)\n    - **cache-extension**：自定义扩展值，若服务器不识别该值将被忽略掉\n\n## 协商缓存\n协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。\n   \n\n### 协商缓存验证\n* 验证位置：**服务器**\n* 验证字段：有两组，`Last-Modified(响应头) + If-Modified-Since(请求头)`和`ETag(响应头) + If-None-Match(请求头)`,**如果两种方式都支持的话，服务器会优先考虑 ETag**\n* 验证流程如下\n![](http://img.kyootah.com/2022/02/12/cedcec762c907.png)\n\n     \n* **Last-Modified(响应头) + If-Modified-Since(请求头)**\n在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段。\n浏览器接收到后，如果再次请求，会在请求头中携带`If-Modified-Since`字段，这个字段的值也就是服务器传来的最后修改时间。\n服务器拿到请求头中的`If-Modified-Since`的字段后，其实会和这个服务器中该资源的最后修改时间`Last-Modified`对比, 询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来。但是如果在本地打开缓存文件，就会造成 `Last-Modified` 被修改，所以在 HTTP / 1.1 出现了 `ETag`。\n\n* **ETag(响应头)、If-None-Match(请求头)**\n`ETag`是服务器根据当前文件的内容，给文件生成的**唯一标识**，只要里面的内容有改动，这个值就会变。服务器通过响应头把这个值给浏览器。\n浏览器接收到 `ETag` 的值，会在下次请求时，将这个值作为`If-None-Match`这个字段的内容，并放到请求头中，然后发给服务器。","slug":"浏览器缓存","published":1,"updated":"2022-02-12T09:13:31.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzmf3k3v000gwgq5oy51sxk6","content":"<blockquote>\n<p>在解析URL之后浏览器根据缓存（强缓存、协商缓存）规则来决定是否取用缓存还是加载服务器资源来进行加载。</p>\n</blockquote>\n<h2 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h2><p>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。<br>强缓存又分为两种：<code>Expires</code>和<code>Cache-Control</code><br><img src=\"http://img.kyootah.com/2022/02/12/ab29c20beebcc.png\"></p>\n<h3 id=\"强缓存验证\"><a href=\"#强缓存验证\" class=\"headerlink\" title=\"强缓存验证\"></a>强缓存验证</h3><ul>\n<li>验证位置：<strong>本地</strong>（内存或者硬盘，根据浏览器策略决定）</li>\n<li>验证字段：<code>expires</code> (http1.0中出现)和<code>cache-control</code> (http1.1中出现)两个，<strong>如果这两个字段同时出现，cache-control会覆盖expires</strong></li>\n<li>验证流程： 查看两个字段的指定时间，如果过期则跳到下一阶段（协商缓存）</li>\n<li>如果命中： 状态码：200 (from disk cache)或是200 OK (from memory cache) <strong>注：根据该缓存的内存占用进行存储，内存占用过高则存入磁盘</strong></li>\n</ul>\n<h3 id=\"cache-control参数\"><a href=\"#cache-control参数\" class=\"headerlink\" title=\"cache-control参数\"></a>cache-control参数</h3><blockquote>\n<p>常用参数：<br><code>private</code>：客户端可以缓存<br><code>public</code>：客户端和代理服务器均可缓存；<br><code>max-age=xxx</code>：缓存的资源将在 xxx 秒后过期，常见：2592000（三十天）、31536000（一年）；<br><code>no-cache</code>：跳过当前强验证步骤，使用下一阶段协商缓存来验证是否过期；<br><code>must-revalidate</code>：如果强缓存时间过期，必须去服务器进行有效性检验这个旧的缓存<br><code>no-transform</code>：多用于图片，不允许对资源进行转换压缩</p>\n</blockquote>\n<p>其他参数：</p>\n<ul>\n<li>请求头：<ul>\n<li><strong>no-cache</strong>：告知 (代理) 服务器不直接使用缓存，要求向原服务器发起请求</li>\n<li><strong>no-store</strong>：所有内容都不会被保存到缓存或 Internet 临时文件中</li>\n<li><strong>max-age=delta-seconds</strong>：告知服务器客户端希望接收一个存在时间不大于 delta-secconds 秒的资源</li>\n<li><strong>max-stale=delta-seconds</strong>：告知 (代理) 服务器客户端愿意接收一个超过缓存时间的资源，若有定义 delta-seconds 则为 delta-seconds 秒，若没有则为任意超出时间</li>\n<li><strong>min-fresh=delta-seconds</strong>：告知 (代理) 服务器客户端希望接收一个在小于 delta-seconds 秒内被更新过的资源</li>\n<li><strong>no-transform</strong>：告知 (代理) 服务器客户端希望获取实体数据没有被转换 (比如压缩) 过的资源</li>\n<li><strong>noly-if-cached</strong>：告知 (代理) 服务器客户端希望获取缓存的内容(若有), 而不用向原服务器发去请求</li>\n<li><strong>cache-extension</strong>：自定义扩展值，若服务器不识别该值将被忽略掉</li>\n</ul>\n</li>\n<li>响应头：<ul>\n<li><strong>public</strong>：表明任何情况下都得缓存该资源 (即使是需要 HTTP 认证的资源)</li>\n<li><strong>Private=field-name</strong>：表明返回报文中全部或部分 (若指定了 field-name 则为 field-name 的字段数据) 仅开放给某些用户 (服务器指定的 share-user，如代理服务器) 做缓存使用，其他用户则不能缓存这些数据</li>\n<li><strong>no-cache</strong>：不直接使用缓存，要求向服务器发起 (新鲜度校验) 请求</li>\n<li><strong>no-store</strong>：所有内容都不会被保存到缓存或 Internet 临时文件中</li>\n<li><strong>no-transform</strong>：告知客户端缓存文件时不得对实体数据做任何改变</li>\n<li><strong>noly-if-cached</strong>：告知 (代理) 服务器客户端希望获取缓存的内容(若有), 而不用向原服务器发去请求</li>\n<li><strong>must-revalidate</strong>：当前资源一定是向原方法服务器发去验证请求的，如请求是吧会返回 504(而非代理服务器上的缓存)</li>\n<li><strong>proxy-revalidate</strong>：与 must-revalidate 类似，但仅能应用于共享缓存 (如代理)</li>\n<li><strong>max-age=delta-seconds</strong>：告知客户端该资源在 delta-seconds 秒内是新鲜的，无需向服务器发请求</li>\n<li><strong>s-maxage=delta-seconds</strong>：同 max-age，但仅能应用于共享缓存 (如代理)</li>\n<li><strong>cache-extension</strong>：自定义扩展值，若服务器不识别该值将被忽略掉</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h2><p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。</p>\n<h3 id=\"协商缓存验证\"><a href=\"#协商缓存验证\" class=\"headerlink\" title=\"协商缓存验证\"></a>协商缓存验证</h3><ul>\n<li><p>验证位置：<strong>服务器</strong></p>\n</li>\n<li><p>验证字段：有两组，<code>Last-Modified(响应头) + If-Modified-Since(请求头)</code>和<code>ETag(响应头) + If-None-Match(请求头)</code>,<strong>如果两种方式都支持的话，服务器会优先考虑 ETag</strong></p>\n</li>\n<li><p>验证流程如下<br><img src=\"http://img.kyootah.com/2022/02/12/cedcec762c907.png\"></p>\n</li>\n<li><p><strong>Last-Modified(响应头) + If-Modified-Since(请求头)</strong><br>在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段。<br>浏览器接收到后，如果再次请求，会在请求头中携带<code>If-Modified-Since</code>字段，这个字段的值也就是服务器传来的最后修改时间。<br>服务器拿到请求头中的<code>If-Modified-Since</code>的字段后，其实会和这个服务器中该资源的最后修改时间<code>Last-Modified</code>对比, 询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来。但是如果在本地打开缓存文件，就会造成 <code>Last-Modified</code> 被修改，所以在 HTTP / 1.1 出现了 <code>ETag</code>。</p>\n</li>\n<li><p><strong>ETag(响应头)、If-None-Match(请求头)</strong><br><code>ETag</code>是服务器根据当前文件的内容，给文件生成的<strong>唯一标识</strong>，只要里面的内容有改动，这个值就会变。服务器通过响应头把这个值给浏览器。<br>浏览器接收到 <code>ETag</code> 的值，会在下次请求时，将这个值作为<code>If-None-Match</code>这个字段的内容，并放到请求头中，然后发给服务器。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在解析URL之后浏览器根据缓存（强缓存、协商缓存）规则来决定是否取用缓存还是加载服务器资源来进行加载。</p>\n</blockquote>\n<h2 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h2><p>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。<br>强缓存又分为两种：<code>Expires</code>和<code>Cache-Control</code><br><img src=\"http://img.kyootah.com/2022/02/12/ab29c20beebcc.png\"></p>\n<h3 id=\"强缓存验证\"><a href=\"#强缓存验证\" class=\"headerlink\" title=\"强缓存验证\"></a>强缓存验证</h3><ul>\n<li>验证位置：<strong>本地</strong>（内存或者硬盘，根据浏览器策略决定）</li>\n<li>验证字段：<code>expires</code> (http1.0中出现)和<code>cache-control</code> (http1.1中出现)两个，<strong>如果这两个字段同时出现，cache-control会覆盖expires</strong></li>\n<li>验证流程： 查看两个字段的指定时间，如果过期则跳到下一阶段（协商缓存）</li>\n<li>如果命中： 状态码：200 (from disk cache)或是200 OK (from memory cache) <strong>注：根据该缓存的内存占用进行存储，内存占用过高则存入磁盘</strong></li>\n</ul>\n<h3 id=\"cache-control参数\"><a href=\"#cache-control参数\" class=\"headerlink\" title=\"cache-control参数\"></a>cache-control参数</h3><blockquote>\n<p>常用参数：<br><code>private</code>：客户端可以缓存<br><code>public</code>：客户端和代理服务器均可缓存；<br><code>max-age=xxx</code>：缓存的资源将在 xxx 秒后过期，常见：2592000（三十天）、31536000（一年）；<br><code>no-cache</code>：跳过当前强验证步骤，使用下一阶段协商缓存来验证是否过期；<br><code>must-revalidate</code>：如果强缓存时间过期，必须去服务器进行有效性检验这个旧的缓存<br><code>no-transform</code>：多用于图片，不允许对资源进行转换压缩</p>\n</blockquote>\n<p>其他参数：</p>\n<ul>\n<li>请求头：<ul>\n<li><strong>no-cache</strong>：告知 (代理) 服务器不直接使用缓存，要求向原服务器发起请求</li>\n<li><strong>no-store</strong>：所有内容都不会被保存到缓存或 Internet 临时文件中</li>\n<li><strong>max-age=delta-seconds</strong>：告知服务器客户端希望接收一个存在时间不大于 delta-secconds 秒的资源</li>\n<li><strong>max-stale=delta-seconds</strong>：告知 (代理) 服务器客户端愿意接收一个超过缓存时间的资源，若有定义 delta-seconds 则为 delta-seconds 秒，若没有则为任意超出时间</li>\n<li><strong>min-fresh=delta-seconds</strong>：告知 (代理) 服务器客户端希望接收一个在小于 delta-seconds 秒内被更新过的资源</li>\n<li><strong>no-transform</strong>：告知 (代理) 服务器客户端希望获取实体数据没有被转换 (比如压缩) 过的资源</li>\n<li><strong>noly-if-cached</strong>：告知 (代理) 服务器客户端希望获取缓存的内容(若有), 而不用向原服务器发去请求</li>\n<li><strong>cache-extension</strong>：自定义扩展值，若服务器不识别该值将被忽略掉</li>\n</ul>\n</li>\n<li>响应头：<ul>\n<li><strong>public</strong>：表明任何情况下都得缓存该资源 (即使是需要 HTTP 认证的资源)</li>\n<li><strong>Private=field-name</strong>：表明返回报文中全部或部分 (若指定了 field-name 则为 field-name 的字段数据) 仅开放给某些用户 (服务器指定的 share-user，如代理服务器) 做缓存使用，其他用户则不能缓存这些数据</li>\n<li><strong>no-cache</strong>：不直接使用缓存，要求向服务器发起 (新鲜度校验) 请求</li>\n<li><strong>no-store</strong>：所有内容都不会被保存到缓存或 Internet 临时文件中</li>\n<li><strong>no-transform</strong>：告知客户端缓存文件时不得对实体数据做任何改变</li>\n<li><strong>noly-if-cached</strong>：告知 (代理) 服务器客户端希望获取缓存的内容(若有), 而不用向原服务器发去请求</li>\n<li><strong>must-revalidate</strong>：当前资源一定是向原方法服务器发去验证请求的，如请求是吧会返回 504(而非代理服务器上的缓存)</li>\n<li><strong>proxy-revalidate</strong>：与 must-revalidate 类似，但仅能应用于共享缓存 (如代理)</li>\n<li><strong>max-age=delta-seconds</strong>：告知客户端该资源在 delta-seconds 秒内是新鲜的，无需向服务器发请求</li>\n<li><strong>s-maxage=delta-seconds</strong>：同 max-age，但仅能应用于共享缓存 (如代理)</li>\n<li><strong>cache-extension</strong>：自定义扩展值，若服务器不识别该值将被忽略掉</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h2><p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。</p>\n<h3 id=\"协商缓存验证\"><a href=\"#协商缓存验证\" class=\"headerlink\" title=\"协商缓存验证\"></a>协商缓存验证</h3><ul>\n<li><p>验证位置：<strong>服务器</strong></p>\n</li>\n<li><p>验证字段：有两组，<code>Last-Modified(响应头) + If-Modified-Since(请求头)</code>和<code>ETag(响应头) + If-None-Match(请求头)</code>,<strong>如果两种方式都支持的话，服务器会优先考虑 ETag</strong></p>\n</li>\n<li><p>验证流程如下<br><img src=\"http://img.kyootah.com/2022/02/12/cedcec762c907.png\"></p>\n</li>\n<li><p><strong>Last-Modified(响应头) + If-Modified-Since(请求头)</strong><br>在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段。<br>浏览器接收到后，如果再次请求，会在请求头中携带<code>If-Modified-Since</code>字段，这个字段的值也就是服务器传来的最后修改时间。<br>服务器拿到请求头中的<code>If-Modified-Since</code>的字段后，其实会和这个服务器中该资源的最后修改时间<code>Last-Modified</code>对比, 询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来。但是如果在本地打开缓存文件，就会造成 <code>Last-Modified</code> 被修改，所以在 HTTP / 1.1 出现了 <code>ETag</code>。</p>\n</li>\n<li><p><strong>ETag(响应头)、If-None-Match(请求头)</strong><br><code>ETag</code>是服务器根据当前文件的内容，给文件生成的<strong>唯一标识</strong>，只要里面的内容有改动，这个值就会变。服务器通过响应头把这个值给浏览器。<br>浏览器接收到 <code>ETag</code> 的值，会在下次请求时，将这个值作为<code>If-None-Match</code>这个字段的内容，并放到请求头中，然后发给服务器。</p>\n</li>\n</ul>\n"},{"title":"计算机基础知识-什么是http？","catalog":true,"date":"2021-05-08T14:31:55.000Z","subtitle":null,"header-img":null,"_content":"\n> 阅读《图解http》总结，这本书通俗易懂，推荐阅读^_^\n> http 是 TCP/IP 内部的一个子集。\n\n## 名词解释 \n\n| 名词         | 解释                                                         | 功能                                                         |\n| :----------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| HTTP         | Hyper Text Transfer Protocol（超文本传输协议）**（应用层）** | 从服务器传输**文本**到本地浏览器的传输协议                   |\n| HTML         | 超文本标记语言                                               |                                                              |\n| URL          | 统一资源定位系统（uniform resource locator）                 | 表示资源的地点。是URI的子集。                                |\n| URI          | 统一资源标志符（universal resource identifier）              | 用字符串表示某一互联网资源                                   |\n| TCP/IP协议族 | 与互联网相关的协议集合                                       | 数据链路层、网络层、传输层和应用层四个协议集合               |\n| DNS          | 域名系统（Domain Name System）                               | 域名到IP地址之间的解析服务。DNS协议提供通过域名/IP名双向查找。 |\n| TCP          | 传输控制协议（Transmission Control Protocol）（**传输层**）  | 进行数据分组，即对HTTP请求报文进行分割（为了方便运输，将大块数据分割成以报文段为单位的数据包进行管理）；并打上标记序号和端口号后转发给网络层。**三次握手** |\n| IP           | 网际协议**（网络层）**                                       | `把各种数据包传给对方。要确保传送有两个重要条件：IP地址、MAC地址。 |\n| IP地址       | 指明了节点被分配到的地址；                                   |                                                              |\n| MAC地址      | 指网卡所属的固定地址                                         | （**通信双方经过多台计算机和网络设备中转进行连接，中转的时候，会利用下一站中转设备的MAC地址来搜索下一个中转目标**） |\n| ARP协议      | 解析地址的协议                                               | **根据通信方的IP地址，反查出对应的MAC地址**                  |\n| SSL          | 安全套接字协议（Secure Sockets Layer）                       | SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。（对传输数据进行加密） |\n| TLS          | 传输层安全（Transport Layer Security）                       | 它的前身是SSL，实现了将应用层的报文进行加密后再交由TCP进行传输 |\n| MIME         | 多用途因特网邮件扩展（Multipurpose Internet Mail Extensions） | 用MIME类型可以设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开 |\n\n## 了解Web及网络基础\n### 网络基础TCP/IP 的分层管理\n\n注 http是TCP/IP内部的一个子集。\n\n- **应用层：**决定了向用户提供应用服务时的通信的活动。**DNS（域名系统）、FTP（文件传输协议）、HTTP协议处于应用层**\n\n- **传输层：**传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。传输层有两个性质不同的协议：TCP（传输     控制器协议）和UDP（用户数据报协议）**TCP（传输控制协议）、UDP（用户数据报协议）属于传输层。**\n\n- **网络层(又名网络互联层)：**用来处理在网络上流动的数据包。  与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。**IP（网际协议）属于网络层。**\n\n- **链路层（数据链路层，网络接口层）：**用来处理网络连接的硬件部分。**包括控制操作系统、硬件设备的驱动、NIC（网络适配器，即网卡）**\n\n数据包是网络传输的最小数据单位。\n\nTCP/IP通信传输流：客户端到服务器通过分层顺序传输 路由选择：在到达通信目标前的中转过程，计算机和路由器等网络设备，都只能获悉很粗略的传输路线，无法掌握互联网中全面传输情况\n\n发送端：从应用层**往下走**；每通过一层会**增加该层**的首部信息（这种把数据信息包装起来的做法称为封装）；\n\n接收端：则从链路层**往上走**到应用层；每通过一层会**删除该层**的首部信息；\n\n![](http://upload.dreamgotrue.cn/2021/05/09/cd4c7817e4c51.png)\n\n![](http://upload.dreamgotrue.cn/2021/05/09/c370e3ba7bf2a.png)\n\n客户端发送到服务器的过程：\n\n![](http://upload.dreamgotrue.cn/2021/05/09/39dd3f5883eec.png)\n\n### TCP的三次握手\nTCP的三次握手（是为了准确无误得将数据送达目标处，把包送出去后，向对方确认是否送达成功）\n1. 发送端受限发送一个带SYN标志的数据包给对方。\n2. 接收端收到后，回传一个带有SYN/ACK标志的数据包传达确认信息。\n3. 最后，发送端再回传一个带ACK标志的数据包，代表握手结束。","source":"_posts/计算机基础知识-什么是http？.md","raw":"---\ntitle: 计算机基础知识-什么是http？\ncatalog: true\ndate: 2021-05-08 22:31:55\nsubtitle:\nheader-img:\ntags:\n- http\n---\n\n> 阅读《图解http》总结，这本书通俗易懂，推荐阅读^_^\n> http 是 TCP/IP 内部的一个子集。\n\n## 名词解释 \n\n| 名词         | 解释                                                         | 功能                                                         |\n| :----------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| HTTP         | Hyper Text Transfer Protocol（超文本传输协议）**（应用层）** | 从服务器传输**文本**到本地浏览器的传输协议                   |\n| HTML         | 超文本标记语言                                               |                                                              |\n| URL          | 统一资源定位系统（uniform resource locator）                 | 表示资源的地点。是URI的子集。                                |\n| URI          | 统一资源标志符（universal resource identifier）              | 用字符串表示某一互联网资源                                   |\n| TCP/IP协议族 | 与互联网相关的协议集合                                       | 数据链路层、网络层、传输层和应用层四个协议集合               |\n| DNS          | 域名系统（Domain Name System）                               | 域名到IP地址之间的解析服务。DNS协议提供通过域名/IP名双向查找。 |\n| TCP          | 传输控制协议（Transmission Control Protocol）（**传输层**）  | 进行数据分组，即对HTTP请求报文进行分割（为了方便运输，将大块数据分割成以报文段为单位的数据包进行管理）；并打上标记序号和端口号后转发给网络层。**三次握手** |\n| IP           | 网际协议**（网络层）**                                       | `把各种数据包传给对方。要确保传送有两个重要条件：IP地址、MAC地址。 |\n| IP地址       | 指明了节点被分配到的地址；                                   |                                                              |\n| MAC地址      | 指网卡所属的固定地址                                         | （**通信双方经过多台计算机和网络设备中转进行连接，中转的时候，会利用下一站中转设备的MAC地址来搜索下一个中转目标**） |\n| ARP协议      | 解析地址的协议                                               | **根据通信方的IP地址，反查出对应的MAC地址**                  |\n| SSL          | 安全套接字协议（Secure Sockets Layer）                       | SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。（对传输数据进行加密） |\n| TLS          | 传输层安全（Transport Layer Security）                       | 它的前身是SSL，实现了将应用层的报文进行加密后再交由TCP进行传输 |\n| MIME         | 多用途因特网邮件扩展（Multipurpose Internet Mail Extensions） | 用MIME类型可以设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开 |\n\n## 了解Web及网络基础\n### 网络基础TCP/IP 的分层管理\n\n注 http是TCP/IP内部的一个子集。\n\n- **应用层：**决定了向用户提供应用服务时的通信的活动。**DNS（域名系统）、FTP（文件传输协议）、HTTP协议处于应用层**\n\n- **传输层：**传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。传输层有两个性质不同的协议：TCP（传输     控制器协议）和UDP（用户数据报协议）**TCP（传输控制协议）、UDP（用户数据报协议）属于传输层。**\n\n- **网络层(又名网络互联层)：**用来处理在网络上流动的数据包。  与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。**IP（网际协议）属于网络层。**\n\n- **链路层（数据链路层，网络接口层）：**用来处理网络连接的硬件部分。**包括控制操作系统、硬件设备的驱动、NIC（网络适配器，即网卡）**\n\n数据包是网络传输的最小数据单位。\n\nTCP/IP通信传输流：客户端到服务器通过分层顺序传输 路由选择：在到达通信目标前的中转过程，计算机和路由器等网络设备，都只能获悉很粗略的传输路线，无法掌握互联网中全面传输情况\n\n发送端：从应用层**往下走**；每通过一层会**增加该层**的首部信息（这种把数据信息包装起来的做法称为封装）；\n\n接收端：则从链路层**往上走**到应用层；每通过一层会**删除该层**的首部信息；\n\n![](http://upload.dreamgotrue.cn/2021/05/09/cd4c7817e4c51.png)\n\n![](http://upload.dreamgotrue.cn/2021/05/09/c370e3ba7bf2a.png)\n\n客户端发送到服务器的过程：\n\n![](http://upload.dreamgotrue.cn/2021/05/09/39dd3f5883eec.png)\n\n### TCP的三次握手\nTCP的三次握手（是为了准确无误得将数据送达目标处，把包送出去后，向对方确认是否送达成功）\n1. 发送端受限发送一个带SYN标志的数据包给对方。\n2. 接收端收到后，回传一个带有SYN/ACK标志的数据包传达确认信息。\n3. 最后，发送端再回传一个带ACK标志的数据包，代表握手结束。","slug":"计算机基础知识-什么是http？","published":1,"updated":"2021-05-09T14:43:26.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzmf3k3x000hwgq59675185q","content":"<blockquote>\n<p>阅读《图解http》总结，这本书通俗易懂，推荐阅读^_^<br>http 是 TCP/IP 内部的一个子集。</p>\n</blockquote>\n<h2 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h2><table>\n<thead>\n<tr>\n<th align=\"left\">名词</th>\n<th>解释</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">HTTP</td>\n<td>Hyper Text Transfer Protocol（超文本传输协议）<strong>（应用层）</strong></td>\n<td>从服务器传输<strong>文本</strong>到本地浏览器的传输协议</td>\n</tr>\n<tr>\n<td align=\"left\">HTML</td>\n<td>超文本标记语言</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">URL</td>\n<td>统一资源定位系统（uniform resource locator）</td>\n<td>表示资源的地点。是URI的子集。</td>\n</tr>\n<tr>\n<td align=\"left\">URI</td>\n<td>统一资源标志符（universal resource identifier）</td>\n<td>用字符串表示某一互联网资源</td>\n</tr>\n<tr>\n<td align=\"left\">TCP/IP协议族</td>\n<td>与互联网相关的协议集合</td>\n<td>数据链路层、网络层、传输层和应用层四个协议集合</td>\n</tr>\n<tr>\n<td align=\"left\">DNS</td>\n<td>域名系统（Domain Name System）</td>\n<td>域名到IP地址之间的解析服务。DNS协议提供通过域名/IP名双向查找。</td>\n</tr>\n<tr>\n<td align=\"left\">TCP</td>\n<td>传输控制协议（Transmission Control Protocol）（<strong>传输层</strong>）</td>\n<td>进行数据分组，即对HTTP请求报文进行分割（为了方便运输，将大块数据分割成以报文段为单位的数据包进行管理）；并打上标记序号和端口号后转发给网络层。<strong>三次握手</strong></td>\n</tr>\n<tr>\n<td align=\"left\">IP</td>\n<td>网际协议<strong>（网络层）</strong></td>\n<td>`把各种数据包传给对方。要确保传送有两个重要条件：IP地址、MAC地址。</td>\n</tr>\n<tr>\n<td align=\"left\">IP地址</td>\n<td>指明了节点被分配到的地址；</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">MAC地址</td>\n<td>指网卡所属的固定地址</td>\n<td>（<strong>通信双方经过多台计算机和网络设备中转进行连接，中转的时候，会利用下一站中转设备的MAC地址来搜索下一个中转目标</strong>）</td>\n</tr>\n<tr>\n<td align=\"left\">ARP协议</td>\n<td>解析地址的协议</td>\n<td><strong>根据通信方的IP地址，反查出对应的MAC地址</strong></td>\n</tr>\n<tr>\n<td align=\"left\">SSL</td>\n<td>安全套接字协议（Secure Sockets Layer）</td>\n<td>SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。（对传输数据进行加密）</td>\n</tr>\n<tr>\n<td align=\"left\">TLS</td>\n<td>传输层安全（Transport Layer Security）</td>\n<td>它的前身是SSL，实现了将应用层的报文进行加密后再交由TCP进行传输</td>\n</tr>\n<tr>\n<td align=\"left\">MIME</td>\n<td>多用途因特网邮件扩展（Multipurpose Internet Mail Extensions）</td>\n<td>用MIME类型可以设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开</td>\n</tr>\n</tbody></table>\n<h2 id=\"了解web及网络基础\"><a href=\"#了解Web及网络基础\" class=\"headerlink\" title=\"了解Web及网络基础\"></a>了解Web及网络基础</h2><h3 id=\"网络基础tcpip-的分层管理\"><a href=\"#网络基础TCP-IP-的分层管理\" class=\"headerlink\" title=\"网络基础TCP/IP 的分层管理\"></a>网络基础TCP/IP 的分层管理</h3><p>注 http是TCP/IP内部的一个子集。</p>\n<ul>\n<li><p><strong>应用层：</strong>决定了向用户提供应用服务时的通信的活动。<strong>DNS（域名系统）、FTP（文件传输协议）、HTTP协议处于应用层</strong></p>\n</li>\n<li><p><strong>传输层：</strong>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。传输层有两个性质不同的协议：TCP（传输     控制器协议）和UDP（用户数据报协议）<strong>TCP（传输控制协议）、UDP（用户数据报协议）属于传输层。</strong></p>\n</li>\n<li><p><strong>网络层(又名网络互联层)：</strong>用来处理在网络上流动的数据包。  与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。<strong>IP（网际协议）属于网络层。</strong></p>\n</li>\n<li><p><strong>链路层（数据链路层，网络接口层）：</strong>用来处理网络连接的硬件部分。<strong>包括控制操作系统、硬件设备的驱动、NIC（网络适配器，即网卡）</strong></p>\n</li>\n</ul>\n<p>数据包是网络传输的最小数据单位。</p>\n<p>TCP/IP通信传输流：客户端到服务器通过分层顺序传输 路由选择：在到达通信目标前的中转过程，计算机和路由器等网络设备，都只能获悉很粗略的传输路线，无法掌握互联网中全面传输情况</p>\n<p>发送端：从应用层<strong>往下走</strong>；每通过一层会<strong>增加该层</strong>的首部信息（这种把数据信息包装起来的做法称为封装）；</p>\n<p>接收端：则从链路层<strong>往上走</strong>到应用层；每通过一层会<strong>删除该层</strong>的首部信息；</p>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/05/09/cd4c7817e4c51.png\"></p>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/05/09/c370e3ba7bf2a.png\"></p>\n<p>客户端发送到服务器的过程：</p>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/05/09/39dd3f5883eec.png\"></p>\n<h3 id=\"tcp的三次握手\"><a href=\"#TCP的三次握手\" class=\"headerlink\" title=\"TCP的三次握手\"></a>TCP的三次握手</h3><p>TCP的三次握手（是为了准确无误得将数据送达目标处，把包送出去后，向对方确认是否送达成功）</p>\n<ol>\n<li>发送端受限发送一个带SYN标志的数据包给对方。</li>\n<li>接收端收到后，回传一个带有SYN/ACK标志的数据包传达确认信息。</li>\n<li>最后，发送端再回传一个带ACK标志的数据包，代表握手结束。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>阅读《图解http》总结，这本书通俗易懂，推荐阅读^_^<br>http 是 TCP/IP 内部的一个子集。</p>\n</blockquote>\n<h2 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h2><table>\n<thead>\n<tr>\n<th align=\"left\">名词</th>\n<th>解释</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">HTTP</td>\n<td>Hyper Text Transfer Protocol（超文本传输协议）<strong>（应用层）</strong></td>\n<td>从服务器传输<strong>文本</strong>到本地浏览器的传输协议</td>\n</tr>\n<tr>\n<td align=\"left\">HTML</td>\n<td>超文本标记语言</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">URL</td>\n<td>统一资源定位系统（uniform resource locator）</td>\n<td>表示资源的地点。是URI的子集。</td>\n</tr>\n<tr>\n<td align=\"left\">URI</td>\n<td>统一资源标志符（universal resource identifier）</td>\n<td>用字符串表示某一互联网资源</td>\n</tr>\n<tr>\n<td align=\"left\">TCP/IP协议族</td>\n<td>与互联网相关的协议集合</td>\n<td>数据链路层、网络层、传输层和应用层四个协议集合</td>\n</tr>\n<tr>\n<td align=\"left\">DNS</td>\n<td>域名系统（Domain Name System）</td>\n<td>域名到IP地址之间的解析服务。DNS协议提供通过域名/IP名双向查找。</td>\n</tr>\n<tr>\n<td align=\"left\">TCP</td>\n<td>传输控制协议（Transmission Control Protocol）（<strong>传输层</strong>）</td>\n<td>进行数据分组，即对HTTP请求报文进行分割（为了方便运输，将大块数据分割成以报文段为单位的数据包进行管理）；并打上标记序号和端口号后转发给网络层。<strong>三次握手</strong></td>\n</tr>\n<tr>\n<td align=\"left\">IP</td>\n<td>网际协议<strong>（网络层）</strong></td>\n<td>`把各种数据包传给对方。要确保传送有两个重要条件：IP地址、MAC地址。</td>\n</tr>\n<tr>\n<td align=\"left\">IP地址</td>\n<td>指明了节点被分配到的地址；</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">MAC地址</td>\n<td>指网卡所属的固定地址</td>\n<td>（<strong>通信双方经过多台计算机和网络设备中转进行连接，中转的时候，会利用下一站中转设备的MAC地址来搜索下一个中转目标</strong>）</td>\n</tr>\n<tr>\n<td align=\"left\">ARP协议</td>\n<td>解析地址的协议</td>\n<td><strong>根据通信方的IP地址，反查出对应的MAC地址</strong></td>\n</tr>\n<tr>\n<td align=\"left\">SSL</td>\n<td>安全套接字协议（Secure Sockets Layer）</td>\n<td>SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。（对传输数据进行加密）</td>\n</tr>\n<tr>\n<td align=\"left\">TLS</td>\n<td>传输层安全（Transport Layer Security）</td>\n<td>它的前身是SSL，实现了将应用层的报文进行加密后再交由TCP进行传输</td>\n</tr>\n<tr>\n<td align=\"left\">MIME</td>\n<td>多用途因特网邮件扩展（Multipurpose Internet Mail Extensions）</td>\n<td>用MIME类型可以设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开</td>\n</tr>\n</tbody></table>\n<h2 id=\"了解Web及网络基础\"><a href=\"#了解Web及网络基础\" class=\"headerlink\" title=\"了解Web及网络基础\"></a>了解Web及网络基础</h2><h3 id=\"网络基础TCP-IP-的分层管理\"><a href=\"#网络基础TCP-IP-的分层管理\" class=\"headerlink\" title=\"网络基础TCP/IP 的分层管理\"></a>网络基础TCP/IP 的分层管理</h3><p>注 http是TCP/IP内部的一个子集。</p>\n<ul>\n<li><p><strong>应用层：</strong>决定了向用户提供应用服务时的通信的活动。<strong>DNS（域名系统）、FTP（文件传输协议）、HTTP协议处于应用层</strong></p>\n</li>\n<li><p><strong>传输层：</strong>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。传输层有两个性质不同的协议：TCP（传输     控制器协议）和UDP（用户数据报协议）<strong>TCP（传输控制协议）、UDP（用户数据报协议）属于传输层。</strong></p>\n</li>\n<li><p><strong>网络层(又名网络互联层)：</strong>用来处理在网络上流动的数据包。  与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。<strong>IP（网际协议）属于网络层。</strong></p>\n</li>\n<li><p><strong>链路层（数据链路层，网络接口层）：</strong>用来处理网络连接的硬件部分。<strong>包括控制操作系统、硬件设备的驱动、NIC（网络适配器，即网卡）</strong></p>\n</li>\n</ul>\n<p>数据包是网络传输的最小数据单位。</p>\n<p>TCP/IP通信传输流：客户端到服务器通过分层顺序传输 路由选择：在到达通信目标前的中转过程，计算机和路由器等网络设备，都只能获悉很粗略的传输路线，无法掌握互联网中全面传输情况</p>\n<p>发送端：从应用层<strong>往下走</strong>；每通过一层会<strong>增加该层</strong>的首部信息（这种把数据信息包装起来的做法称为封装）；</p>\n<p>接收端：则从链路层<strong>往上走</strong>到应用层；每通过一层会<strong>删除该层</strong>的首部信息；</p>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/05/09/cd4c7817e4c51.png\"></p>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/05/09/c370e3ba7bf2a.png\"></p>\n<p>客户端发送到服务器的过程：</p>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/05/09/39dd3f5883eec.png\"></p>\n<h3 id=\"TCP的三次握手\"><a href=\"#TCP的三次握手\" class=\"headerlink\" title=\"TCP的三次握手\"></a>TCP的三次握手</h3><p>TCP的三次握手（是为了准确无误得将数据送达目标处，把包送出去后，向对方确认是否送达成功）</p>\n<ol>\n<li>发送端受限发送一个带SYN标志的数据包给对方。</li>\n<li>接收端收到后，回传一个带有SYN/ACK标志的数据包传达确认信息。</li>\n<li>最后，发送端再回传一个带ACK标志的数据包，代表握手结束。</li>\n</ol>\n"},{"title":"弹性布局flex详解","subtitle":"flex学习详细记录，理解各个属性的特性及用法。","header-img":"/img/article_header/article_header.png","catalog":true,"toc_nav_num":true,"date":"2020-05-11T13:17:04.000Z","updateDate":"2021-05-05T13:17:04.000Z","toc":true,"_content":" \n\n## 背景\nFlex是`Flexible Box`的缩写，意为”**弹性布局**”，用来为盒状模型提供最大的灵活性,旨在提供一个更有效地布局、对齐方式，并且能够使容器中的子元素大小未知或动态变化情况下仍然能够分配好子元素之间的空间。\n\nFlex 布局的主要思想是使父容器能够调节子元素的宽度/高度（和排列顺序），从而能够最好地填充可用空间 **（主要是为了适应所有类型的显示设备和屏幕尺寸）** flex布容器能够放大子元素使之尽可能填充可用空间，也可以收缩子元素使之不溢出。\n\n最重要的是，**flexbox布局与方向无关**，不同于常规布局（基于垂直的块（block）和基于水平的内联（inline））。 虽然传统布局适用于页面，但它们对于大型或复杂的应用程序布局来说缺乏灵活性（特别是在改变方向，调整大小，拉伸，收缩等方面）。\n\n注:\n* **Flexbox布局最适合应用程序的组件和小规模布局，而 Gird 布局则适用于较大规模的布局。**\n* **设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。**\n\n<!-- more -->\n\n## 基本概念\n> 采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n![基本概念](http://upload.dreamgotrue.cn/2021/04/10/0426548eccf4c.png)\n  \n\n\n## flex容器属性\n\n ![属性](http://upload.dreamgotrue.cn/2021/04/10/2af8fcd984ece.png)\n\n### display:flex;\n\n![](http://upload.dreamgotrue.cn/2021/04/14/95163b9178a2a.png) \n\n### flex-direction\n设置轴的方向。\n* row（默认）：主轴水平方向，起点左端\n* row-reverse：主轴水平方向，起点右端\n* column：主轴垂直方向，起点上方\n* column-reverse：主轴垂直方向，起点下方\n  \n![](http://upload.dreamgotrue.cn/2021/04/14/6f1554a56176c.png)\n![](http://upload.dreamgotrue.cn/2021/04/14/74686ba65f227.png) \n\n \n### flex-wrap\n* nowrap（默认）：不换行\n* wrap：换行，第一行在上方\n* wrap-reverse：换行，第一行在下方\n\n![](http://upload.dreamgotrue.cn/2021/04/14/07cbf0032f8d3.png)\n\n\n### justify-content\n* flex-start（默认值）：左对齐\n* flex-end：右对齐\n* center：居中\n* space-between：两端对齐，中间间隔平分\n* space-around：每个项目间隔相等排列\n\n![](http://upload.dreamgotrue.cn/2021/04/14/b1ceacb101b05.png)\n![](http://upload.dreamgotrue.cn/2021/04/14/7fc8fd8191def.png)\n\n### align-items（单轴线）\n* stretch（默认）：如果项目没设高度或者高度auto，将占满容器高度\n* flex-start：交叉轴的起点对齐\n* flex-end：交叉轴的终点对齐\n* center：交叉轴的中位点对齐\n* baseline：项目的第一页文字的基线对齐\n\n![](http://upload.dreamgotrue.cn/2021/04/14/76e873c7bfcaf.png)\n\n对于 `align-items: stretch` 来说，必须将每一个矩形子元素(flex项)的 **高度设置为 auto**，否则 height 属性将会覆盖该 stretch，如下图\n![](http://upload.dreamgotrue.cn/2021/04/15/45cc6510a98cf.png)\n\n对于 `align-items: baseline` 来说，对齐方式基于 **第一行文本内容高度**,要注意如果去掉段落标签或者没内容，矩形子元素(flex项)就会按照每个矩形的底部对齐,如下图：\n![](http://upload.dreamgotrue.cn/2021/04/15/b6d6c708b75d3.png)\n\n### align-content（多轴线）\nalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n* stretch（默认）\n* flex-start\n* flex-end\n* center\n* space-between：各轴线容器两端对齐，中间间隔均等分\n* space-around：轴线再容器间隙均等分（两边会有间隙）\n\n![](http://upload.dreamgotrue.cn/2021/04/15/4acd07e1cf3eb.png)\n\n\n## 项目属性\n项目属性用来设置容器内项目（某个元素）的相关样式，用于设置项目的尺寸、位置、对齐方式\n基本语法：\n* order \n* flex-basis\n* flex-grow\n* flex-shrink\n* flex  \n* align-self\n\n### order\n`order` 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0\n```html\n<div class=\"flexBox box\">\n    <div style=\"order:1\">1</div>\n    <div style=\"order:0\">0</div>\n    <div style=\"order:2\">2</div>\n    <div style=\"order:4\">4</div>\n    <div style=\"order:3\">3</div>\n    <div style=\"order:-1\">-1</div>\n</div>\n```\n![](http://upload.dreamgotrue.cn/2021/04/22/7b053849d3a5d.png)\n\n\n### Flex-Basis\n`flex-basis` 控制一个子元素(flex项)的默认大小，但是它可以被其他的 Flexbox 属性影响（默认值auto）。\n\n下图可以看出它与`width`的作用相同，都能设置宽度，当两者同时存在时Flex-Basis会覆盖width\n![](http://upload.dreamgotrue.cn/2021/04/23/3b7197ac49190.png)\n![](http://upload.dreamgotrue.cn/2021/04/23/c1498ad79fc38.png)\n\n但是他们之间还是有不同的？flex-basis 对应于 flex 轴线而言的：\n![](http://upload.dreamgotrue.cn/2021/04/23/5c881cfec67e9.png)\nflex-basis 影响元素在主轴(main axis)上的大小。\n`flex-direction`改变为`colunm`则从width切换到影响height\n \n\n### flex-grow（拉伸）\n属性定义项目的放大比例，默认为0，不放大。\n注：**flex-grow是一个相对值，拉伸放大的区域大小取决于容器承载元素后剩下的区域大小，并根据所设置flex-grow的占比进行比例拉伸**。\n示例：\n我们先将所有矩形元素（flex项）设置为相同的width,100px,与设置间距(margin)10px，容器宽度大小为1100px:\n![](http://upload.dreamgotrue.cn/2021/04/26/5ce176a9f6c4a.png)\n现在我们把所有正方形的`flex-grow`设置为1，默认为0（有剩余地方也不做拉伸填充）,\n可以看到方块均匀地拉伸并把剩下的空间填充完整（间隙是因为设置了10px的margin）\n![](http://upload.dreamgotrue.cn/2021/05/06/b35341e49128e.png)\n\n现在我们把第一个正方形的`flex-grow`设置为2,\n这个时候第一个方块的宽度为266.68px，拉伸了`166.68px`,其他方块的的宽度为183.34px,拉伸了`83.34px`,可以看到拉伸的大小为其他方块的2倍，这里可以得出方块总flex-grow数量为2+1+1+1=7,第一块占2/7,其余方块占1/7\n![](http://upload.dreamgotrue.cn/2021/05/06/a223eb133e6b0.png)\n\n总结：每个子元素的`flex-grow`都是按比例拉伸的（默认为0，不拉伸），\n同`flex-basis`一样`flex-grow`也是只作用与主轴的默认水平方向影响的只有`width`，除非改变`flex-direction`的值。\n\n### Flex Shrink（收缩）\n与`flex-grow`同理但相反，`flex-shrink`设置的是当容器主轴长度不足以承载所有项目且`flex-wrap`没有设置换行的情况下，项目对应的收缩比例。\n同`flex-grow`一样，是相对值，`flex-shrink`默认值是1，所以他们允许被收缩。\n例：我们先把容器宽度设置500px，每个方块宽高设置100px\n![](http://upload.dreamgotrue.cn/2021/05/06/caa72ce543167.png)\n我们把容器宽度从500px缩小到300px，可以看到各个项目均等比例缩小了。\n![](http://upload.dreamgotrue.cn/2021/05/06/a4d53f5e50f56.png)\n这个时候我们把第二个方块的`flex-shrink`设置为**0**,不收缩，可以看到方块2就不会进行收缩固定了原来的宽度\n![](http://upload.dreamgotrue.cn/2021/05/06/43fdc7dd47c8d.png)\n这个时候有的小伙伴就要问，如果全部都设置为0呢？可以从下图看到，全部设置不收缩的情况下容器就会被撑开了。\n![](http://upload.dreamgotrue.cn/2021/05/06/965f7894183a7.png)\n现在我们来研究一下收缩的大小问题。\n`flex-shrink`收缩跟`flex-grow`一样是根据项目`flex-shrink`设置的总比例来收缩的。\n\n我们试下把第一个方块`flex-shrink`设置为2，第二块设置为3。\n![](http://upload.dreamgotrue.cn/2021/05/06/7d80718c1f77b.png)\n最终得到第一块宽度50px,第二块宽度25px,其余75px,对应第二块跟第二块的收缩大小是其他方块的一倍跟两倍，这个是怎么来的呢？让我们列个表格计算一下。\n![](http://upload.dreamgotrue.cn/2021/05/06/7638b10032503.png)\n根据表格可以看出：当容器宽度为300px时，容器内项目总宽度500px，超出的200px分别按比例在各个方块内扣除了，方块一收缩了200px的2/8,方块二3/8,其余1/8。\n这个时候我们设置一下把第一个方块设置`flex-shrink`为100\n可以看出方块1不见了，width变成了0\n![](http://upload.dreamgotrue.cn/2021/05/06/1a11daac4434e.png)\n这里可以看出当收缩比例占比超出项目宽度的时候，项目的主轴长度会变成0，然后其余项目按比例收缩剩余的大小。这里200px分给了项目1还剩150px,然后项目2对应收缩了150px的3/6，其他项目收缩1/6就可以得出上图结果了。\n\n总结：`flex-shrink`设置的是当项目总宽度大于容器宽度且没设置换行时项目的收缩比例，一样也是只作用与主轴的默认水平方向影响的只有`width`，除非改变`flex-direction`的值。\n\n### flex\n`flex` 是 `flex-grow`，`flex-shrink` 和 `flex-basis` 的缩写。\n默认值是**flex:0 1 auto** 即：flex-grow:0;flex-shrink:1;flex-basis:auto;\n","source":"_posts/弹性布局flex详解.md","raw":"---\ntitle: 弹性布局flex详解\nsubtitle: \"flex学习详细记录，理解各个属性的特性及用法。\"\nheader-img: \"/img/article_header/article_header.png\"\ncatalog: true\ntoc_nav_num: true\ndate: 2020-05-11 21:17:04\nupdateDate: 2021-05-05 21:17:04\ncategories:\n- css\ntags:\n- css\n- flex弹性布局\ntoc: true\n# top: 10\n\n \n---\n \n\n## 背景\nFlex是`Flexible Box`的缩写，意为”**弹性布局**”，用来为盒状模型提供最大的灵活性,旨在提供一个更有效地布局、对齐方式，并且能够使容器中的子元素大小未知或动态变化情况下仍然能够分配好子元素之间的空间。\n\nFlex 布局的主要思想是使父容器能够调节子元素的宽度/高度（和排列顺序），从而能够最好地填充可用空间 **（主要是为了适应所有类型的显示设备和屏幕尺寸）** flex布容器能够放大子元素使之尽可能填充可用空间，也可以收缩子元素使之不溢出。\n\n最重要的是，**flexbox布局与方向无关**，不同于常规布局（基于垂直的块（block）和基于水平的内联（inline））。 虽然传统布局适用于页面，但它们对于大型或复杂的应用程序布局来说缺乏灵活性（特别是在改变方向，调整大小，拉伸，收缩等方面）。\n\n注:\n* **Flexbox布局最适合应用程序的组件和小规模布局，而 Gird 布局则适用于较大规模的布局。**\n* **设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。**\n\n<!-- more -->\n\n## 基本概念\n> 采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n![基本概念](http://upload.dreamgotrue.cn/2021/04/10/0426548eccf4c.png)\n  \n\n\n## flex容器属性\n\n ![属性](http://upload.dreamgotrue.cn/2021/04/10/2af8fcd984ece.png)\n\n### display:flex;\n\n![](http://upload.dreamgotrue.cn/2021/04/14/95163b9178a2a.png) \n\n### flex-direction\n设置轴的方向。\n* row（默认）：主轴水平方向，起点左端\n* row-reverse：主轴水平方向，起点右端\n* column：主轴垂直方向，起点上方\n* column-reverse：主轴垂直方向，起点下方\n  \n![](http://upload.dreamgotrue.cn/2021/04/14/6f1554a56176c.png)\n![](http://upload.dreamgotrue.cn/2021/04/14/74686ba65f227.png) \n\n \n### flex-wrap\n* nowrap（默认）：不换行\n* wrap：换行，第一行在上方\n* wrap-reverse：换行，第一行在下方\n\n![](http://upload.dreamgotrue.cn/2021/04/14/07cbf0032f8d3.png)\n\n\n### justify-content\n* flex-start（默认值）：左对齐\n* flex-end：右对齐\n* center：居中\n* space-between：两端对齐，中间间隔平分\n* space-around：每个项目间隔相等排列\n\n![](http://upload.dreamgotrue.cn/2021/04/14/b1ceacb101b05.png)\n![](http://upload.dreamgotrue.cn/2021/04/14/7fc8fd8191def.png)\n\n### align-items（单轴线）\n* stretch（默认）：如果项目没设高度或者高度auto，将占满容器高度\n* flex-start：交叉轴的起点对齐\n* flex-end：交叉轴的终点对齐\n* center：交叉轴的中位点对齐\n* baseline：项目的第一页文字的基线对齐\n\n![](http://upload.dreamgotrue.cn/2021/04/14/76e873c7bfcaf.png)\n\n对于 `align-items: stretch` 来说，必须将每一个矩形子元素(flex项)的 **高度设置为 auto**，否则 height 属性将会覆盖该 stretch，如下图\n![](http://upload.dreamgotrue.cn/2021/04/15/45cc6510a98cf.png)\n\n对于 `align-items: baseline` 来说，对齐方式基于 **第一行文本内容高度**,要注意如果去掉段落标签或者没内容，矩形子元素(flex项)就会按照每个矩形的底部对齐,如下图：\n![](http://upload.dreamgotrue.cn/2021/04/15/b6d6c708b75d3.png)\n\n### align-content（多轴线）\nalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n* stretch（默认）\n* flex-start\n* flex-end\n* center\n* space-between：各轴线容器两端对齐，中间间隔均等分\n* space-around：轴线再容器间隙均等分（两边会有间隙）\n\n![](http://upload.dreamgotrue.cn/2021/04/15/4acd07e1cf3eb.png)\n\n\n## 项目属性\n项目属性用来设置容器内项目（某个元素）的相关样式，用于设置项目的尺寸、位置、对齐方式\n基本语法：\n* order \n* flex-basis\n* flex-grow\n* flex-shrink\n* flex  \n* align-self\n\n### order\n`order` 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0\n```html\n<div class=\"flexBox box\">\n    <div style=\"order:1\">1</div>\n    <div style=\"order:0\">0</div>\n    <div style=\"order:2\">2</div>\n    <div style=\"order:4\">4</div>\n    <div style=\"order:3\">3</div>\n    <div style=\"order:-1\">-1</div>\n</div>\n```\n![](http://upload.dreamgotrue.cn/2021/04/22/7b053849d3a5d.png)\n\n\n### Flex-Basis\n`flex-basis` 控制一个子元素(flex项)的默认大小，但是它可以被其他的 Flexbox 属性影响（默认值auto）。\n\n下图可以看出它与`width`的作用相同，都能设置宽度，当两者同时存在时Flex-Basis会覆盖width\n![](http://upload.dreamgotrue.cn/2021/04/23/3b7197ac49190.png)\n![](http://upload.dreamgotrue.cn/2021/04/23/c1498ad79fc38.png)\n\n但是他们之间还是有不同的？flex-basis 对应于 flex 轴线而言的：\n![](http://upload.dreamgotrue.cn/2021/04/23/5c881cfec67e9.png)\nflex-basis 影响元素在主轴(main axis)上的大小。\n`flex-direction`改变为`colunm`则从width切换到影响height\n \n\n### flex-grow（拉伸）\n属性定义项目的放大比例，默认为0，不放大。\n注：**flex-grow是一个相对值，拉伸放大的区域大小取决于容器承载元素后剩下的区域大小，并根据所设置flex-grow的占比进行比例拉伸**。\n示例：\n我们先将所有矩形元素（flex项）设置为相同的width,100px,与设置间距(margin)10px，容器宽度大小为1100px:\n![](http://upload.dreamgotrue.cn/2021/04/26/5ce176a9f6c4a.png)\n现在我们把所有正方形的`flex-grow`设置为1，默认为0（有剩余地方也不做拉伸填充）,\n可以看到方块均匀地拉伸并把剩下的空间填充完整（间隙是因为设置了10px的margin）\n![](http://upload.dreamgotrue.cn/2021/05/06/b35341e49128e.png)\n\n现在我们把第一个正方形的`flex-grow`设置为2,\n这个时候第一个方块的宽度为266.68px，拉伸了`166.68px`,其他方块的的宽度为183.34px,拉伸了`83.34px`,可以看到拉伸的大小为其他方块的2倍，这里可以得出方块总flex-grow数量为2+1+1+1=7,第一块占2/7,其余方块占1/7\n![](http://upload.dreamgotrue.cn/2021/05/06/a223eb133e6b0.png)\n\n总结：每个子元素的`flex-grow`都是按比例拉伸的（默认为0，不拉伸），\n同`flex-basis`一样`flex-grow`也是只作用与主轴的默认水平方向影响的只有`width`，除非改变`flex-direction`的值。\n\n### Flex Shrink（收缩）\n与`flex-grow`同理但相反，`flex-shrink`设置的是当容器主轴长度不足以承载所有项目且`flex-wrap`没有设置换行的情况下，项目对应的收缩比例。\n同`flex-grow`一样，是相对值，`flex-shrink`默认值是1，所以他们允许被收缩。\n例：我们先把容器宽度设置500px，每个方块宽高设置100px\n![](http://upload.dreamgotrue.cn/2021/05/06/caa72ce543167.png)\n我们把容器宽度从500px缩小到300px，可以看到各个项目均等比例缩小了。\n![](http://upload.dreamgotrue.cn/2021/05/06/a4d53f5e50f56.png)\n这个时候我们把第二个方块的`flex-shrink`设置为**0**,不收缩，可以看到方块2就不会进行收缩固定了原来的宽度\n![](http://upload.dreamgotrue.cn/2021/05/06/43fdc7dd47c8d.png)\n这个时候有的小伙伴就要问，如果全部都设置为0呢？可以从下图看到，全部设置不收缩的情况下容器就会被撑开了。\n![](http://upload.dreamgotrue.cn/2021/05/06/965f7894183a7.png)\n现在我们来研究一下收缩的大小问题。\n`flex-shrink`收缩跟`flex-grow`一样是根据项目`flex-shrink`设置的总比例来收缩的。\n\n我们试下把第一个方块`flex-shrink`设置为2，第二块设置为3。\n![](http://upload.dreamgotrue.cn/2021/05/06/7d80718c1f77b.png)\n最终得到第一块宽度50px,第二块宽度25px,其余75px,对应第二块跟第二块的收缩大小是其他方块的一倍跟两倍，这个是怎么来的呢？让我们列个表格计算一下。\n![](http://upload.dreamgotrue.cn/2021/05/06/7638b10032503.png)\n根据表格可以看出：当容器宽度为300px时，容器内项目总宽度500px，超出的200px分别按比例在各个方块内扣除了，方块一收缩了200px的2/8,方块二3/8,其余1/8。\n这个时候我们设置一下把第一个方块设置`flex-shrink`为100\n可以看出方块1不见了，width变成了0\n![](http://upload.dreamgotrue.cn/2021/05/06/1a11daac4434e.png)\n这里可以看出当收缩比例占比超出项目宽度的时候，项目的主轴长度会变成0，然后其余项目按比例收缩剩余的大小。这里200px分给了项目1还剩150px,然后项目2对应收缩了150px的3/6，其他项目收缩1/6就可以得出上图结果了。\n\n总结：`flex-shrink`设置的是当项目总宽度大于容器宽度且没设置换行时项目的收缩比例，一样也是只作用与主轴的默认水平方向影响的只有`width`，除非改变`flex-direction`的值。\n\n### flex\n`flex` 是 `flex-grow`，`flex-shrink` 和 `flex-basis` 的缩写。\n默认值是**flex:0 1 auto** 即：flex-grow:0;flex-shrink:1;flex-basis:auto;\n","slug":"弹性布局flex详解","published":1,"updated":"2021-05-06T06:57:03.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzmf3k3z000kwgq5sfohz4dp","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>Flex是<code>Flexible Box</code>的缩写，意为”<strong>弹性布局</strong>”，用来为盒状模型提供最大的灵活性,旨在提供一个更有效地布局、对齐方式，并且能够使容器中的子元素大小未知或动态变化情况下仍然能够分配好子元素之间的空间。</p>\n<p>Flex 布局的主要思想是使父容器能够调节子元素的宽度/高度（和排列顺序），从而能够最好地填充可用空间 <strong>（主要是为了适应所有类型的显示设备和屏幕尺寸）</strong> flex布容器能够放大子元素使之尽可能填充可用空间，也可以收缩子元素使之不溢出。</p>\n<p>最重要的是，<strong>flexbox布局与方向无关</strong>，不同于常规布局（基于垂直的块（block）和基于水平的内联（inline））。 虽然传统布局适用于页面，但它们对于大型或复杂的应用程序布局来说缺乏灵活性（特别是在改变方向，调整大小，拉伸，收缩等方面）。</p>\n<p>注:</p>\n<ul>\n<li><strong>Flexbox布局最适合应用程序的组件和小规模布局，而 Gird 布局则适用于较大规模的布局。</strong></li>\n<li><strong>设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</strong></li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><blockquote>\n<p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。<br><img src=\"http://upload.dreamgotrue.cn/2021/04/10/0426548eccf4c.png\" alt=\"基本概念\"></p>\n</blockquote>\n<h2 id=\"flex容器属性\"><a href=\"#flex容器属性\" class=\"headerlink\" title=\"flex容器属性\"></a>flex容器属性</h2><p> <img src=\"http://upload.dreamgotrue.cn/2021/04/10/2af8fcd984ece.png\" alt=\"属性\"></p>\n<h3 id=\"displayflex\"><a href=\"#display-flex\" class=\"headerlink\" title=\"display:flex;\"></a>display:flex;</h3><p><img src=\"http://upload.dreamgotrue.cn/2021/04/14/95163b9178a2a.png\"> </p>\n<h3 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h3><p>设置轴的方向。</p>\n<ul>\n<li>row（默认）：主轴水平方向，起点左端</li>\n<li>row-reverse：主轴水平方向，起点右端</li>\n<li>column：主轴垂直方向，起点上方</li>\n<li>column-reverse：主轴垂直方向，起点下方</li>\n</ul>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/14/6f1554a56176c.png\"><br><img src=\"http://upload.dreamgotrue.cn/2021/04/14/74686ba65f227.png\"> </p>\n<h3 id=\"flex-wrap\"><a href=\"#flex-wrap\" class=\"headerlink\" title=\"flex-wrap\"></a>flex-wrap</h3><ul>\n<li>nowrap（默认）：不换行</li>\n<li>wrap：换行，第一行在上方</li>\n<li>wrap-reverse：换行，第一行在下方</li>\n</ul>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/14/07cbf0032f8d3.png\"></p>\n<h3 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a>justify-content</h3><ul>\n<li>flex-start（默认值）：左对齐</li>\n<li>flex-end：右对齐</li>\n<li>center：居中</li>\n<li>space-between：两端对齐，中间间隔平分</li>\n<li>space-around：每个项目间隔相等排列</li>\n</ul>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/14/b1ceacb101b05.png\"><br><img src=\"http://upload.dreamgotrue.cn/2021/04/14/7fc8fd8191def.png\"></p>\n<h3 id=\"align-items单轴线\"><a href=\"#align-items（单轴线）\" class=\"headerlink\" title=\"align-items（单轴线）\"></a>align-items（单轴线）</h3><ul>\n<li>stretch（默认）：如果项目没设高度或者高度auto，将占满容器高度</li>\n<li>flex-start：交叉轴的起点对齐</li>\n<li>flex-end：交叉轴的终点对齐</li>\n<li>center：交叉轴的中位点对齐</li>\n<li>baseline：项目的第一页文字的基线对齐</li>\n</ul>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/14/76e873c7bfcaf.png\"></p>\n<p>对于 <code>align-items: stretch</code> 来说，必须将每一个矩形子元素(flex项)的 <strong>高度设置为 auto</strong>，否则 height 属性将会覆盖该 stretch，如下图<br><img src=\"http://upload.dreamgotrue.cn/2021/04/15/45cc6510a98cf.png\"></p>\n<p>对于 <code>align-items: baseline</code> 来说，对齐方式基于 <strong>第一行文本内容高度</strong>,要注意如果去掉段落标签或者没内容，矩形子元素(flex项)就会按照每个矩形的底部对齐,如下图：<br><img src=\"http://upload.dreamgotrue.cn/2021/04/15/b6d6c708b75d3.png\"></p>\n<h3 id=\"align-content多轴线\"><a href=\"#align-content（多轴线）\" class=\"headerlink\" title=\"align-content（多轴线）\"></a>align-content（多轴线）</h3><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<ul>\n<li>stretch（默认）</li>\n<li>flex-start</li>\n<li>flex-end</li>\n<li>center</li>\n<li>space-between：各轴线容器两端对齐，中间间隔均等分</li>\n<li>space-around：轴线再容器间隙均等分（两边会有间隙）</li>\n</ul>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/15/4acd07e1cf3eb.png\"></p>\n<h2 id=\"项目属性\"><a href=\"#项目属性\" class=\"headerlink\" title=\"项目属性\"></a>项目属性</h2><p>项目属性用来设置容器内项目（某个元素）的相关样式，用于设置项目的尺寸、位置、对齐方式<br>基本语法：</p>\n<ul>\n<li>order </li>\n<li>flex-basis</li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex  </li>\n<li>align-self</li>\n</ul>\n<h3 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a>order</h3><p><code>order</code> 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flexBox box\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"order:1\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"order:0\"</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"order:2\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"order:4\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"order:3\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"order:-1\"</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/22/7b053849d3a5d.png\"></p>\n<h3 id=\"flex-basis\"><a href=\"#Flex-Basis\" class=\"headerlink\" title=\"Flex-Basis\"></a>Flex-Basis</h3><p><code>flex-basis</code> 控制一个子元素(flex项)的默认大小，但是它可以被其他的 Flexbox 属性影响（默认值auto）。</p>\n<p>下图可以看出它与<code>width</code>的作用相同，都能设置宽度，当两者同时存在时Flex-Basis会覆盖width<br><img src=\"http://upload.dreamgotrue.cn/2021/04/23/3b7197ac49190.png\"><br><img src=\"http://upload.dreamgotrue.cn/2021/04/23/c1498ad79fc38.png\"></p>\n<p>但是他们之间还是有不同的？flex-basis 对应于 flex 轴线而言的：<br><img src=\"http://upload.dreamgotrue.cn/2021/04/23/5c881cfec67e9.png\"><br>flex-basis 影响元素在主轴(main axis)上的大小。<br><code>flex-direction</code>改变为<code>colunm</code>则从width切换到影响height</p>\n<h3 id=\"flex-grow拉伸\"><a href=\"#flex-grow（拉伸）\" class=\"headerlink\" title=\"flex-grow（拉伸）\"></a>flex-grow（拉伸）</h3><p>属性定义项目的放大比例，默认为0，不放大。<br>注：<strong>flex-grow是一个相对值，拉伸放大的区域大小取决于容器承载元素后剩下的区域大小，并根据所设置flex-grow的占比进行比例拉伸</strong>。<br>示例：<br>我们先将所有矩形元素（flex项）设置为相同的width,100px,与设置间距(margin)10px，容器宽度大小为1100px:<br><img src=\"http://upload.dreamgotrue.cn/2021/04/26/5ce176a9f6c4a.png\"><br>现在我们把所有正方形的<code>flex-grow</code>设置为1，默认为0（有剩余地方也不做拉伸填充）,<br>可以看到方块均匀地拉伸并把剩下的空间填充完整（间隙是因为设置了10px的margin）<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/b35341e49128e.png\"></p>\n<p>现在我们把第一个正方形的<code>flex-grow</code>设置为2,<br>这个时候第一个方块的宽度为266.68px，拉伸了<code>166.68px</code>,其他方块的的宽度为183.34px,拉伸了<code>83.34px</code>,可以看到拉伸的大小为其他方块的2倍，这里可以得出方块总flex-grow数量为2+1+1+1=7,第一块占2/7,其余方块占1/7<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/a223eb133e6b0.png\"></p>\n<p>总结：每个子元素的<code>flex-grow</code>都是按比例拉伸的（默认为0，不拉伸），<br>同<code>flex-basis</code>一样<code>flex-grow</code>也是只作用与主轴的默认水平方向影响的只有<code>width</code>，除非改变<code>flex-direction</code>的值。</p>\n<h3 id=\"flex-shrink收缩\"><a href=\"#Flex-Shrink（收缩）\" class=\"headerlink\" title=\"Flex Shrink（收缩）\"></a>Flex Shrink（收缩）</h3><p>与<code>flex-grow</code>同理但相反，<code>flex-shrink</code>设置的是当容器主轴长度不足以承载所有项目且<code>flex-wrap</code>没有设置换行的情况下，项目对应的收缩比例。<br>同<code>flex-grow</code>一样，是相对值，<code>flex-shrink</code>默认值是1，所以他们允许被收缩。<br>例：我们先把容器宽度设置500px，每个方块宽高设置100px<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/caa72ce543167.png\"><br>我们把容器宽度从500px缩小到300px，可以看到各个项目均等比例缩小了。<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/a4d53f5e50f56.png\"><br>这个时候我们把第二个方块的<code>flex-shrink</code>设置为<strong>0</strong>,不收缩，可以看到方块2就不会进行收缩固定了原来的宽度<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/43fdc7dd47c8d.png\"><br>这个时候有的小伙伴就要问，如果全部都设置为0呢？可以从下图看到，全部设置不收缩的情况下容器就会被撑开了。<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/965f7894183a7.png\"><br>现在我们来研究一下收缩的大小问题。<br><code>flex-shrink</code>收缩跟<code>flex-grow</code>一样是根据项目<code>flex-shrink</code>设置的总比例来收缩的。</p>\n<p>我们试下把第一个方块<code>flex-shrink</code>设置为2，第二块设置为3。<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/7d80718c1f77b.png\"><br>最终得到第一块宽度50px,第二块宽度25px,其余75px,对应第二块跟第二块的收缩大小是其他方块的一倍跟两倍，这个是怎么来的呢？让我们列个表格计算一下。<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/7638b10032503.png\"><br>根据表格可以看出：当容器宽度为300px时，容器内项目总宽度500px，超出的200px分别按比例在各个方块内扣除了，方块一收缩了200px的2/8,方块二3/8,其余1/8。<br>这个时候我们设置一下把第一个方块设置<code>flex-shrink</code>为100<br>可以看出方块1不见了，width变成了0<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/1a11daac4434e.png\"><br>这里可以看出当收缩比例占比超出项目宽度的时候，项目的主轴长度会变成0，然后其余项目按比例收缩剩余的大小。这里200px分给了项目1还剩150px,然后项目2对应收缩了150px的3/6，其他项目收缩1/6就可以得出上图结果了。</p>\n<p>总结：<code>flex-shrink</code>设置的是当项目总宽度大于容器宽度且没设置换行时项目的收缩比例，一样也是只作用与主轴的默认水平方向影响的只有<code>width</code>，除非改变<code>flex-direction</code>的值。</p>\n<h3 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p><code>flex</code> 是 <code>flex-grow</code>，<code>flex-shrink</code> 和 <code>flex-basis</code> 的缩写。<br>默认值是<strong>flex:0 1 auto</strong> 即：flex-grow:0;flex-shrink:1;flex-basis:auto;</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>Flex是<code>Flexible Box</code>的缩写，意为”<strong>弹性布局</strong>”，用来为盒状模型提供最大的灵活性,旨在提供一个更有效地布局、对齐方式，并且能够使容器中的子元素大小未知或动态变化情况下仍然能够分配好子元素之间的空间。</p>\n<p>Flex 布局的主要思想是使父容器能够调节子元素的宽度/高度（和排列顺序），从而能够最好地填充可用空间 <strong>（主要是为了适应所有类型的显示设备和屏幕尺寸）</strong> flex布容器能够放大子元素使之尽可能填充可用空间，也可以收缩子元素使之不溢出。</p>\n<p>最重要的是，<strong>flexbox布局与方向无关</strong>，不同于常规布局（基于垂直的块（block）和基于水平的内联（inline））。 虽然传统布局适用于页面，但它们对于大型或复杂的应用程序布局来说缺乏灵活性（特别是在改变方向，调整大小，拉伸，收缩等方面）。</p>\n<p>注:</p>\n<ul>\n<li><strong>Flexbox布局最适合应用程序的组件和小规模布局，而 Gird 布局则适用于较大规模的布局。</strong></li>\n<li><strong>设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</strong></li>\n</ul>","more":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><blockquote>\n<p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。<br><img src=\"http://upload.dreamgotrue.cn/2021/04/10/0426548eccf4c.png\" alt=\"基本概念\"></p>\n</blockquote>\n<h2 id=\"flex容器属性\"><a href=\"#flex容器属性\" class=\"headerlink\" title=\"flex容器属性\"></a>flex容器属性</h2><p> <img src=\"http://upload.dreamgotrue.cn/2021/04/10/2af8fcd984ece.png\" alt=\"属性\"></p>\n<h3 id=\"display-flex\"><a href=\"#display-flex\" class=\"headerlink\" title=\"display:flex;\"></a>display:flex;</h3><p><img src=\"http://upload.dreamgotrue.cn/2021/04/14/95163b9178a2a.png\"> </p>\n<h3 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h3><p>设置轴的方向。</p>\n<ul>\n<li>row（默认）：主轴水平方向，起点左端</li>\n<li>row-reverse：主轴水平方向，起点右端</li>\n<li>column：主轴垂直方向，起点上方</li>\n<li>column-reverse：主轴垂直方向，起点下方</li>\n</ul>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/14/6f1554a56176c.png\"><br><img src=\"http://upload.dreamgotrue.cn/2021/04/14/74686ba65f227.png\"> </p>\n<h3 id=\"flex-wrap\"><a href=\"#flex-wrap\" class=\"headerlink\" title=\"flex-wrap\"></a>flex-wrap</h3><ul>\n<li>nowrap（默认）：不换行</li>\n<li>wrap：换行，第一行在上方</li>\n<li>wrap-reverse：换行，第一行在下方</li>\n</ul>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/14/07cbf0032f8d3.png\"></p>\n<h3 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a>justify-content</h3><ul>\n<li>flex-start（默认值）：左对齐</li>\n<li>flex-end：右对齐</li>\n<li>center：居中</li>\n<li>space-between：两端对齐，中间间隔平分</li>\n<li>space-around：每个项目间隔相等排列</li>\n</ul>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/14/b1ceacb101b05.png\"><br><img src=\"http://upload.dreamgotrue.cn/2021/04/14/7fc8fd8191def.png\"></p>\n<h3 id=\"align-items（单轴线）\"><a href=\"#align-items（单轴线）\" class=\"headerlink\" title=\"align-items（单轴线）\"></a>align-items（单轴线）</h3><ul>\n<li>stretch（默认）：如果项目没设高度或者高度auto，将占满容器高度</li>\n<li>flex-start：交叉轴的起点对齐</li>\n<li>flex-end：交叉轴的终点对齐</li>\n<li>center：交叉轴的中位点对齐</li>\n<li>baseline：项目的第一页文字的基线对齐</li>\n</ul>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/14/76e873c7bfcaf.png\"></p>\n<p>对于 <code>align-items: stretch</code> 来说，必须将每一个矩形子元素(flex项)的 <strong>高度设置为 auto</strong>，否则 height 属性将会覆盖该 stretch，如下图<br><img src=\"http://upload.dreamgotrue.cn/2021/04/15/45cc6510a98cf.png\"></p>\n<p>对于 <code>align-items: baseline</code> 来说，对齐方式基于 <strong>第一行文本内容高度</strong>,要注意如果去掉段落标签或者没内容，矩形子元素(flex项)就会按照每个矩形的底部对齐,如下图：<br><img src=\"http://upload.dreamgotrue.cn/2021/04/15/b6d6c708b75d3.png\"></p>\n<h3 id=\"align-content（多轴线）\"><a href=\"#align-content（多轴线）\" class=\"headerlink\" title=\"align-content（多轴线）\"></a>align-content（多轴线）</h3><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<ul>\n<li>stretch（默认）</li>\n<li>flex-start</li>\n<li>flex-end</li>\n<li>center</li>\n<li>space-between：各轴线容器两端对齐，中间间隔均等分</li>\n<li>space-around：轴线再容器间隙均等分（两边会有间隙）</li>\n</ul>\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/15/4acd07e1cf3eb.png\"></p>\n<h2 id=\"项目属性\"><a href=\"#项目属性\" class=\"headerlink\" title=\"项目属性\"></a>项目属性</h2><p>项目属性用来设置容器内项目（某个元素）的相关样式，用于设置项目的尺寸、位置、对齐方式<br>基本语法：</p>\n<ul>\n<li>order </li>\n<li>flex-basis</li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex  </li>\n<li>align-self</li>\n</ul>\n<h3 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a>order</h3><p><code>order</code> 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flexBox box\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"order:1\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"order:0\"</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"order:2\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"order:4\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"order:3\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"order:-1\"</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://upload.dreamgotrue.cn/2021/04/22/7b053849d3a5d.png\"></p>\n<h3 id=\"Flex-Basis\"><a href=\"#Flex-Basis\" class=\"headerlink\" title=\"Flex-Basis\"></a>Flex-Basis</h3><p><code>flex-basis</code> 控制一个子元素(flex项)的默认大小，但是它可以被其他的 Flexbox 属性影响（默认值auto）。</p>\n<p>下图可以看出它与<code>width</code>的作用相同，都能设置宽度，当两者同时存在时Flex-Basis会覆盖width<br><img src=\"http://upload.dreamgotrue.cn/2021/04/23/3b7197ac49190.png\"><br><img src=\"http://upload.dreamgotrue.cn/2021/04/23/c1498ad79fc38.png\"></p>\n<p>但是他们之间还是有不同的？flex-basis 对应于 flex 轴线而言的：<br><img src=\"http://upload.dreamgotrue.cn/2021/04/23/5c881cfec67e9.png\"><br>flex-basis 影响元素在主轴(main axis)上的大小。<br><code>flex-direction</code>改变为<code>colunm</code>则从width切换到影响height</p>\n<h3 id=\"flex-grow（拉伸）\"><a href=\"#flex-grow（拉伸）\" class=\"headerlink\" title=\"flex-grow（拉伸）\"></a>flex-grow（拉伸）</h3><p>属性定义项目的放大比例，默认为0，不放大。<br>注：<strong>flex-grow是一个相对值，拉伸放大的区域大小取决于容器承载元素后剩下的区域大小，并根据所设置flex-grow的占比进行比例拉伸</strong>。<br>示例：<br>我们先将所有矩形元素（flex项）设置为相同的width,100px,与设置间距(margin)10px，容器宽度大小为1100px:<br><img src=\"http://upload.dreamgotrue.cn/2021/04/26/5ce176a9f6c4a.png\"><br>现在我们把所有正方形的<code>flex-grow</code>设置为1，默认为0（有剩余地方也不做拉伸填充）,<br>可以看到方块均匀地拉伸并把剩下的空间填充完整（间隙是因为设置了10px的margin）<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/b35341e49128e.png\"></p>\n<p>现在我们把第一个正方形的<code>flex-grow</code>设置为2,<br>这个时候第一个方块的宽度为266.68px，拉伸了<code>166.68px</code>,其他方块的的宽度为183.34px,拉伸了<code>83.34px</code>,可以看到拉伸的大小为其他方块的2倍，这里可以得出方块总flex-grow数量为2+1+1+1=7,第一块占2/7,其余方块占1/7<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/a223eb133e6b0.png\"></p>\n<p>总结：每个子元素的<code>flex-grow</code>都是按比例拉伸的（默认为0，不拉伸），<br>同<code>flex-basis</code>一样<code>flex-grow</code>也是只作用与主轴的默认水平方向影响的只有<code>width</code>，除非改变<code>flex-direction</code>的值。</p>\n<h3 id=\"Flex-Shrink（收缩）\"><a href=\"#Flex-Shrink（收缩）\" class=\"headerlink\" title=\"Flex Shrink（收缩）\"></a>Flex Shrink（收缩）</h3><p>与<code>flex-grow</code>同理但相反，<code>flex-shrink</code>设置的是当容器主轴长度不足以承载所有项目且<code>flex-wrap</code>没有设置换行的情况下，项目对应的收缩比例。<br>同<code>flex-grow</code>一样，是相对值，<code>flex-shrink</code>默认值是1，所以他们允许被收缩。<br>例：我们先把容器宽度设置500px，每个方块宽高设置100px<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/caa72ce543167.png\"><br>我们把容器宽度从500px缩小到300px，可以看到各个项目均等比例缩小了。<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/a4d53f5e50f56.png\"><br>这个时候我们把第二个方块的<code>flex-shrink</code>设置为<strong>0</strong>,不收缩，可以看到方块2就不会进行收缩固定了原来的宽度<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/43fdc7dd47c8d.png\"><br>这个时候有的小伙伴就要问，如果全部都设置为0呢？可以从下图看到，全部设置不收缩的情况下容器就会被撑开了。<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/965f7894183a7.png\"><br>现在我们来研究一下收缩的大小问题。<br><code>flex-shrink</code>收缩跟<code>flex-grow</code>一样是根据项目<code>flex-shrink</code>设置的总比例来收缩的。</p>\n<p>我们试下把第一个方块<code>flex-shrink</code>设置为2，第二块设置为3。<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/7d80718c1f77b.png\"><br>最终得到第一块宽度50px,第二块宽度25px,其余75px,对应第二块跟第二块的收缩大小是其他方块的一倍跟两倍，这个是怎么来的呢？让我们列个表格计算一下。<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/7638b10032503.png\"><br>根据表格可以看出：当容器宽度为300px时，容器内项目总宽度500px，超出的200px分别按比例在各个方块内扣除了，方块一收缩了200px的2/8,方块二3/8,其余1/8。<br>这个时候我们设置一下把第一个方块设置<code>flex-shrink</code>为100<br>可以看出方块1不见了，width变成了0<br><img src=\"http://upload.dreamgotrue.cn/2021/05/06/1a11daac4434e.png\"><br>这里可以看出当收缩比例占比超出项目宽度的时候，项目的主轴长度会变成0，然后其余项目按比例收缩剩余的大小。这里200px分给了项目1还剩150px,然后项目2对应收缩了150px的3/6，其他项目收缩1/6就可以得出上图结果了。</p>\n<p>总结：<code>flex-shrink</code>设置的是当项目总宽度大于容器宽度且没设置换行时项目的收缩比例，一样也是只作用与主轴的默认水平方向影响的只有<code>width</code>，除非改变<code>flex-direction</code>的值。</p>\n<h3 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p><code>flex</code> 是 <code>flex-grow</code>，<code>flex-shrink</code> 和 <code>flex-basis</code> 的缩写。<br>默认值是<strong>flex:0 1 auto</strong> 即：flex-grow:0;flex-shrink:1;flex-basis:auto;</p>"},{"title":"理解JS中的new及其工作","catalog":true,"date":"2020-06-30T08:16:40.000Z","subtitle":null,"header-img":null,"_content":"\n> new到底做了哪些事情？\n\n### new到底做了哪些事情\n\n先举个栗子\n```js\nfunction Person(firtName, lastName) {\n  this.firtName = firtName;\n  this.lastName = lastName;\n}\n\nPerson.prototype.getFullName = function () {\n  return `${this.firtName} ${this.lastName}`;\n};\n\nconst wyf = new Person('Wu', 'yifang');\nconsole.log(wyf); \n```\n查看一下控制台打印的wyf实例\n![](http://upload.dreamgotrue.cn/2021/07/30/02f6089556c4f.png)","source":"_posts/理解JS中的new及其工作.md","raw":"---\ntitle: 理解JS中的new及其工作\ncatalog: true\ndate: 2020-06-30 16:16:40\nsubtitle:\nheader-img:\ntags:\n- 回归JS基础\n---\n\n> new到底做了哪些事情？\n\n### new到底做了哪些事情\n\n先举个栗子\n```js\nfunction Person(firtName, lastName) {\n  this.firtName = firtName;\n  this.lastName = lastName;\n}\n\nPerson.prototype.getFullName = function () {\n  return `${this.firtName} ${this.lastName}`;\n};\n\nconst wyf = new Person('Wu', 'yifang');\nconsole.log(wyf); \n```\n查看一下控制台打印的wyf实例\n![](http://upload.dreamgotrue.cn/2021/07/30/02f6089556c4f.png)","slug":"理解JS中的new及其工作","published":1,"updated":"2021-07-30T09:33:25.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzmf3k40000mwgq5rgs0lojv","content":"<blockquote>\n<p>new到底做了哪些事情？</p>\n</blockquote>\n<h3 id=\"new到底做了哪些事情\"><a href=\"#new到底做了哪些事情\" class=\"headerlink\" title=\"new到底做了哪些事情\"></a>new到底做了哪些事情</h3><p>先举个栗子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">firtName, lastName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.firtName = firtName;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.lastName = lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.getFullName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.firtName&#125;</span> <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.lastName&#125;</span>`</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> wyf = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Wu'</span>, <span class=\"string\">'yifang'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wyf);</span><br></pre></td></tr></table></figure>\n\n<p>查看一下控制台打印的wyf实例<br><img src=\"http://upload.dreamgotrue.cn/2021/07/30/02f6089556c4f.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>new到底做了哪些事情？</p>\n</blockquote>\n<h3 id=\"new到底做了哪些事情\"><a href=\"#new到底做了哪些事情\" class=\"headerlink\" title=\"new到底做了哪些事情\"></a>new到底做了哪些事情</h3><p>先举个栗子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">firtName, lastName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.firtName = firtName;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.lastName = lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.getFullName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.firtName&#125;</span> <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.lastName&#125;</span>`</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> wyf = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Wu'</span>, <span class=\"string\">'yifang'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wyf);</span><br></pre></td></tr></table></figure>\n\n<p>查看一下控制台打印的wyf实例<br><img src=\"http://upload.dreamgotrue.cn/2021/07/30/02f6089556c4f.png\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckzmf3k3s000cwgq5uuxvutzp","category_id":"ckzmf3k3p0009wgq5ogjvtbvq","_id":"ckzmf3k3y000iwgq5ofexroes"},{"post_id":"ckzmf3k3k0006wgq5oylte3zu","category_id":"ckzmf3k3p0009wgq5ogjvtbvq","_id":"ckzmf3k40000lwgq5bcdiykdf"},{"post_id":"ckzmf3k3t000dwgq5l8gmdxqc","category_id":"ckzmf3k3p0009wgq5ogjvtbvq","_id":"ckzmf3k41000nwgq5n5xvjve1"},{"post_id":"ckzmf3k3p000awgq53vrn7yji","category_id":"ckzmf3k3u000ewgq57z2ttgpj","_id":"ckzmf3k42000pwgq5o7k3qrj4"},{"post_id":"ckzmf3k3z000kwgq5sfohz4dp","category_id":"ckzmf3k3u000ewgq57z2ttgpj","_id":"ckzmf3k43000rwgq5uegunmf6"}],"PostTag":[{"post_id":"ckzmf3k390001wgq5pt9oppre","tag_id":"ckzmf3k3i0005wgq5imdof5zx","_id":"ckzmf3k43000qwgq5kkeu0eug"},{"post_id":"ckzmf3k390001wgq5pt9oppre","tag_id":"ckzmf3k3r000bwgq5r9y2phtx","_id":"ckzmf3k43000swgq5w6lvxyc2"},{"post_id":"ckzmf3k390001wgq5pt9oppre","tag_id":"ckzmf3k3v000fwgq5x2y04zjl","_id":"ckzmf3k45000uwgq5dsjzs79w"},{"post_id":"ckzmf3k390001wgq5pt9oppre","tag_id":"ckzmf3k3y000jwgq5ox75slzg","_id":"ckzmf3k45000vwgq5dq94atbf"},{"post_id":"ckzmf3k3f0003wgq5hzvaobge","tag_id":"ckzmf3k42000owgq5xocfebr6","_id":"ckzmf3k46000xwgq52jtueouu"},{"post_id":"ckzmf3k3k0006wgq5oylte3zu","tag_id":"ckzmf3k42000owgq5xocfebr6","_id":"ckzmf3k46000ywgq5btycq81j"},{"post_id":"ckzmf3k3m0008wgq5pl423i6o","tag_id":"ckzmf3k45000wwgq5zb46uplz","_id":"ckzmf3k470010wgq5yz6c3ny1"},{"post_id":"ckzmf3k3p000awgq53vrn7yji","tag_id":"ckzmf3k3y000jwgq5ox75slzg","_id":"ckzmf3k480012wgq5k2k3c9np"},{"post_id":"ckzmf3k3s000cwgq5uuxvutzp","tag_id":"ckzmf3k42000owgq5xocfebr6","_id":"ckzmf3k480014wgq58szo9gah"},{"post_id":"ckzmf3k3t000dwgq5l8gmdxqc","tag_id":"ckzmf3k42000owgq5xocfebr6","_id":"ckzmf3k490016wgq5ctp757bs"},{"post_id":"ckzmf3k3v000gwgq5oy51sxk6","tag_id":"ckzmf3k490015wgq5245bud73","_id":"ckzmf3k4a0019wgq542gt9n4t"},{"post_id":"ckzmf3k3v000gwgq5oy51sxk6","tag_id":"ckzmf3k490017wgq5zddfwfi7","_id":"ckzmf3k4b001awgq565qmjait"},{"post_id":"ckzmf3k3x000hwgq59675185q","tag_id":"ckzmf3k4a0018wgq5ppcni9g3","_id":"ckzmf3k4b001cwgq5pjkd0iwy"},{"post_id":"ckzmf3k3z000kwgq5sfohz4dp","tag_id":"ckzmf3k3y000jwgq5ox75slzg","_id":"ckzmf3k4c001ewgq5b84e36xg"},{"post_id":"ckzmf3k3z000kwgq5sfohz4dp","tag_id":"ckzmf3k4b001bwgq5bg05i8od","_id":"ckzmf3k4c001fwgq5alae7924"},{"post_id":"ckzmf3k40000mwgq5rgs0lojv","tag_id":"ckzmf3k45000wwgq5zb46uplz","_id":"ckzmf3k4d001gwgq590n02297"}],"Tag":[{"name":"BFC","_id":"ckzmf3k3i0005wgq5imdof5zx"},{"name":"边距重合","_id":"ckzmf3k3r000bwgq5r9y2phtx"},{"name":"边距塌陷","_id":"ckzmf3k3v000fwgq5x2y04zjl"},{"name":"css","_id":"ckzmf3k3y000jwgq5ox75slzg"},{"name":"工作中遇到的问题","_id":"ckzmf3k42000owgq5xocfebr6"},{"name":"回归JS基础","_id":"ckzmf3k45000wwgq5zb46uplz"},{"name":"网络基础","_id":"ckzmf3k490015wgq5245bud73"},{"name":"浏览器缓存","_id":"ckzmf3k490017wgq5zddfwfi7"},{"name":"http","_id":"ckzmf3k4a0018wgq5ppcni9g3"},{"name":"flex弹性布局","_id":"ckzmf3k4b001bwgq5bg05i8od"}]}}